/*
 * ArtItem.java
 *
 * Generated with Matisse Schema Definition Language 9.1.8
 * Generation date: Fri Apr 08 06:56:32 2016
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>ArtItem</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class ArtItem extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.8
     * Generation Date: Fri Apr 08 06:56:32 2016
     */

    /*
     * Class variables and methods
     */

    /** Class <code>ArtItem</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("ArtItem"));

    /**
     * Gets the <code>ArtItem</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public ArtItem(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected ArtItem(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(ArtItem.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, ArtItem.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(ArtItem.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, ArtItem.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'ItemlotNo' */

    /** Attribute <code>ItemlotNo</code> cache ID */
    private static int itemlotNoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ItemlotNo",CID));

    /**
     * Gets the <code>ItemlotNo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getItemlotNoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(itemlotNoCID);
    }


    /**
     * Gets the <code>ItemlotNo</code> attribute value.
     * @return the value
     *
     * @see #setItemlotNo
     * @see #removeItemlotNo
     */
    public final int getItemlotNo() {
        return getInteger(getItemlotNoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ItemlotNo</code> attribute value.
     * @param val the new value
     *
     * @see #getItemlotNo
     * @see #removeItemlotNo
     */
    public final void setItemlotNo(int val) {
        setInteger(getItemlotNoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ItemlotNo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getItemlotNo
     * @see #setItemlotNo
     */
    public final void removeItemlotNo() {
        removeValue(getItemlotNoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getItemlotNo
     * @see #setItemlotNo
     */
    public final boolean isItemlotNoDefaultValue() {
        return isDefaultValue(getItemlotNoAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findArtItem' of attribute 'ItemlotNo' */

    /** EntryPointDictionary <code>findArtItem</code> cache ID */
    private static int findArtItemDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findArtItem"));

    /**
     * Gets the <code>findArtItem</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindArtItemDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findArtItemDictionaryCID);
    }

    /**
     * Finds the <code>ArtItem</code> object where <code>ItemlotNo</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>ArtItem</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static ArtItem lookupFindArtItem(com.matisse.MtDatabase db, String value) {
        return (ArtItem)getFindArtItemDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>ArtItem</code> objects where <code>ItemlotNo</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findArtItemIterator(com.matisse.MtDatabase db, String value) {
        return getFindArtItemDictionary(db).<E>iterator(value, getClass(db), ArtItem.class);
    }

    /**
     * Creates an iterator on all <code>ArtItem</code> objects where <code>ItemlotNo</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findArtItemIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindArtItemDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, ArtItem.class);
    }


    /* Attribute 'ArtTitle' */

    /** Attribute <code>ArtTitle</code> cache ID */
    private static int artTitleCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ArtTitle",CID));

    /**
     * Gets the <code>ArtTitle</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getArtTitleAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(artTitleCID);
    }


    /**
     * Gets the <code>ArtTitle</code> attribute value.
     * @return the value
     *
     * @see #setArtTitle
     * @see #removeArtTitle
     */
    public final String getArtTitle() {
        return getString(getArtTitleAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ArtTitle</code> attribute value.
     * @param val the new value
     *
     * @see #getArtTitle
     * @see #removeArtTitle
     */
    public final void setArtTitle(String val) {
        setString(getArtTitleAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ArtTitle</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getArtTitle
     * @see #setArtTitle
     */
    public final void removeArtTitle() {
        removeValue(getArtTitleAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getArtTitle
     * @see #setArtTitle
     */
    public final boolean isArtTitleDefaultValue() {
        return isDefaultValue(getArtTitleAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findArtItemTitle' of attribute 'ArtTitle' */

    /** EntryPointDictionary <code>findArtItemTitle</code> cache ID */
    private static int findArtItemTitleDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findArtItemTitle"));

    /**
     * Gets the <code>findArtItemTitle</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindArtItemTitleDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findArtItemTitleDictionaryCID);
    }

    /**
     * Finds the <code>ArtItem</code> object where <code>ArtTitle</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>ArtItem</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static ArtItem lookupFindArtItemTitle(com.matisse.MtDatabase db, String value) {
        return (ArtItem)getFindArtItemTitleDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>ArtItem</code> objects where <code>ArtTitle</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findArtItemTitleIterator(com.matisse.MtDatabase db, String value) {
        return getFindArtItemTitleDictionary(db).<E>iterator(value, getClass(db), ArtItem.class);
    }

    /**
     * Creates an iterator on all <code>ArtItem</code> objects where <code>ArtTitle</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findArtItemTitleIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindArtItemTitleDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, ArtItem.class);
    }


    /* Attribute 'ArtistName' */

    /** Attribute <code>ArtistName</code> cache ID */
    private static int artistNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ArtistName",CID));

    /**
     * Gets the <code>ArtistName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getArtistNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(artistNameCID);
    }


    /**
     * Gets the <code>ArtistName</code> attribute value.
     * @return the value
     *
     * @see #setArtistName
     * @see #removeArtistName
     */
    public final String getArtistName() {
        return getString(getArtistNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ArtistName</code> attribute value.
     * @param val the new value
     *
     * @see #getArtistName
     * @see #removeArtistName
     */
    public final void setArtistName(String val) {
        setString(getArtistNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ArtistName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getArtistName
     * @see #setArtistName
     */
    public final void removeArtistName() {
        removeValue(getArtistNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getArtistName
     * @see #setArtistName
     */
    public final boolean isArtistNameDefaultValue() {
        return isDefaultValue(getArtistNameAttribute(getMtDatabase()));
    }


    /* Attribute 'PeriodFrom' */

    /** Attribute <code>PeriodFrom</code> cache ID */
    private static int periodFromCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("PeriodFrom",CID));

    /**
     * Gets the <code>PeriodFrom</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPeriodFromAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(periodFromCID);
    }


    /**
     * Gets the <code>PeriodFrom</code> attribute value.
     * @return the value
     *
     * @see #setPeriodFrom
     * @see #removePeriodFrom
     */
    public final String getPeriodFrom() {
        return getString(getPeriodFromAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>PeriodFrom</code> attribute value.
     * @param val the new value
     *
     * @see #getPeriodFrom
     * @see #removePeriodFrom
     */
    public final void setPeriodFrom(String val) {
        setString(getPeriodFromAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>PeriodFrom</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPeriodFrom
     * @see #setPeriodFrom
     */
    public final void removePeriodFrom() {
        removeValue(getPeriodFromAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPeriodFrom
     * @see #setPeriodFrom
     */
    public final boolean isPeriodFromDefaultValue() {
        return isDefaultValue(getPeriodFromAttribute(getMtDatabase()));
    }


    /* Attribute 'PeriodTo' */

    /** Attribute <code>PeriodTo</code> cache ID */
    private static int periodToCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("PeriodTo",CID));

    /**
     * Gets the <code>PeriodTo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPeriodToAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(periodToCID);
    }


    /**
     * Gets the <code>PeriodTo</code> attribute value.
     * @return the value
     *
     * @see #setPeriodTo
     * @see #removePeriodTo
     */
    public final String getPeriodTo() {
        return getString(getPeriodToAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>PeriodTo</code> attribute value.
     * @param val the new value
     *
     * @see #getPeriodTo
     * @see #removePeriodTo
     */
    public final void setPeriodTo(String val) {
        setString(getPeriodToAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>PeriodTo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPeriodTo
     * @see #setPeriodTo
     */
    public final void removePeriodTo() {
        removeValue(getPeriodToAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getPeriodTo
     * @see #setPeriodTo
     */
    public final boolean isPeriodToNull() {
        return isNull(getPeriodToAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPeriodTo
     * @see #setPeriodTo
     */
    public final boolean isPeriodToDefaultValue() {
        return isDefaultValue(getPeriodToAttribute(getMtDatabase()));
    }


    /* Attribute 'Classification' */

    /** Attribute <code>Classification</code> cache ID */
    private static int classificationCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Classification",CID));

    /**
     * Gets the <code>Classification</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getClassificationAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(classificationCID);
    }


    /**
     * Gets the <code>Classification</code> attribute value.
     * @return the value
     *
     * @see #setClassification
     * @see #removeClassification
     */
    public final String getClassification() {
        return getString(getClassificationAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Classification</code> attribute value.
     * @param val the new value
     *
     * @see #getClassification
     * @see #removeClassification
     */
    public final void setClassification(String val) {
        setString(getClassificationAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Classification</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getClassification
     * @see #setClassification
     */
    public final void removeClassification() {
        removeValue(getClassificationAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getClassification
     * @see #setClassification
     */
    public final boolean isClassificationDefaultValue() {
        return isDefaultValue(getClassificationAttribute(getMtDatabase()));
    }


    /* Attribute 'Description' */

    /** Attribute <code>Description</code> cache ID */
    private static int descriptionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Description",CID));

    /**
     * Gets the <code>Description</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDescriptionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(descriptionCID);
    }


    /**
     * Gets the <code>Description</code> attribute value.
     * @return the value
     *
     * @see #setDescription
     * @see #removeDescription
     */
    public final String getDescription() {
        return getString(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Description</code> attribute value.
     * @param val the new value
     *
     * @see #getDescription
     * @see #removeDescription
     */
    public final void setDescription(String val) {
        setString(getDescriptionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Description</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final void removeDescription() {
        removeValue(getDescriptionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDescription
     * @see #setDescription
     */
    public final boolean isDescriptionDefaultValue() {
        return isDefaultValue(getDescriptionAttribute(getMtDatabase()));
    }


    /* Attribute 'ProvenanceDetails' */

    /** Attribute <code>ProvenanceDetails</code> cache ID */
    private static int provenanceDetailsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ProvenanceDetails",CID));

    /**
     * Gets the <code>ProvenanceDetails</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getProvenanceDetailsAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(provenanceDetailsCID);
    }


    /**
     * Gets the <code>ProvenanceDetails</code> attribute value.
     * @return the value
     *
     * @see #setProvenanceDetails
     * @see #removeProvenanceDetails
     */
    public final String getProvenanceDetails() {
        return getString(getProvenanceDetailsAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ProvenanceDetails</code> attribute value.
     * @param val the new value
     *
     * @see #getProvenanceDetails
     * @see #removeProvenanceDetails
     */
    public final void setProvenanceDetails(String val) {
        setString(getProvenanceDetailsAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ProvenanceDetails</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getProvenanceDetails
     * @see #setProvenanceDetails
     */
    public final void removeProvenanceDetails() {
        removeValue(getProvenanceDetailsAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getProvenanceDetails
     * @see #setProvenanceDetails
     */
    public final boolean isProvenanceDetailsDefaultValue() {
        return isDefaultValue(getProvenanceDetailsAttribute(getMtDatabase()));
    }


    /* Attribute 'Authentification' */

    /** Attribute <code>Authentification</code> cache ID */
    private static int authentificationCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Authentification",CID));

    /**
     * Gets the <code>Authentification</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuthentificationAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(authentificationCID);
    }


    /**
     * Gets the <code>Authentification</code> attribute value.
     * @return the value
     *
     * @see #setAuthentification
     * @see #removeAuthentification
     */
    public final boolean getAuthentification() {
        return getBoolean(getAuthentificationAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Authentification</code> attribute value.
     * @param val the new value
     *
     * @see #getAuthentification
     * @see #removeAuthentification
     */
    public final void setAuthentification(boolean val) {
        setBoolean(getAuthentificationAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Authentification</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuthentification
     * @see #setAuthentification
     */
    public final void removeAuthentification() {
        removeValue(getAuthentificationAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuthentification
     * @see #setAuthentification
     */
    public final boolean isAuthentificationDefaultValue() {
        return isDefaultValue(getAuthentificationAttribute(getMtDatabase()));
    }


    /* Attribute 'CustomerAgreement' */

    /** Attribute <code>CustomerAgreement</code> cache ID */
    private static int customerAgreementCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("CustomerAgreement",CID));

    /**
     * Gets the <code>CustomerAgreement</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getCustomerAgreementAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(customerAgreementCID);
    }


    /**
     * Gets the <code>CustomerAgreement</code> attribute value.
     * @return the value
     *
     * @see #setCustomerAgreement
     * @see #removeCustomerAgreement
     */
    public final boolean getCustomerAgreement() {
        return getBoolean(getCustomerAgreementAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>CustomerAgreement</code> attribute value.
     * @param val the new value
     *
     * @see #getCustomerAgreement
     * @see #removeCustomerAgreement
     */
    public final void setCustomerAgreement(boolean val) {
        setBoolean(getCustomerAgreementAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>CustomerAgreement</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getCustomerAgreement
     * @see #setCustomerAgreement
     */
    public final void removeCustomerAgreement() {
        removeValue(getCustomerAgreementAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getCustomerAgreement
     * @see #setCustomerAgreement
     */
    public final boolean isCustomerAgreementDefaultValue() {
        return isDefaultValue(getCustomerAgreementAttribute(getMtDatabase()));
    }


    /* Attribute 'AuctionEstimatedDateDate' */

    /** Attribute <code>AuctionEstimatedDateDate</code> cache ID */
    private static int auctionEstimatedDateDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AuctionEstimatedDateDate",CID));

    /**
     * Gets the <code>AuctionEstimatedDateDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctionEstimatedDateDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctionEstimatedDateDateCID);
    }


    /**
     * Gets the <code>AuctionEstimatedDateDate</code> attribute value.
     * @return the value
     *
     * @see #setAuctionEstimatedDateDate
     * @see #removeAuctionEstimatedDateDate
     */
    public final String getAuctionEstimatedDateDate() {
        return getString(getAuctionEstimatedDateDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AuctionEstimatedDateDate</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctionEstimatedDateDate
     * @see #removeAuctionEstimatedDateDate
     */
    public final void setAuctionEstimatedDateDate(String val) {
        setString(getAuctionEstimatedDateDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AuctionEstimatedDateDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctionEstimatedDateDate
     * @see #setAuctionEstimatedDateDate
     */
    public final void removeAuctionEstimatedDateDate() {
        removeValue(getAuctionEstimatedDateDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctionEstimatedDateDate
     * @see #setAuctionEstimatedDateDate
     */
    public final boolean isAuctionEstimatedDateDateDefaultValue() {
        return isDefaultValue(getAuctionEstimatedDateDateAttribute(getMtDatabase()));
    }


    /* Attribute 'EstimatedPrice' */

    /** Attribute <code>EstimatedPrice</code> cache ID */
    private static int estimatedPriceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("EstimatedPrice",CID));

    /**
     * Gets the <code>EstimatedPrice</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getEstimatedPriceAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(estimatedPriceCID);
    }


    /**
     * Gets the <code>EstimatedPrice</code> attribute value.
     * @return the value
     *
     * @see #setEstimatedPrice
     * @see #removeEstimatedPrice
     */
    public final double getEstimatedPrice() {
        return getDouble(getEstimatedPriceAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>EstimatedPrice</code> attribute value.
     * @param val the new value
     *
     * @see #getEstimatedPrice
     * @see #removeEstimatedPrice
     */
    public final void setEstimatedPrice(double val) {
        setDouble(getEstimatedPriceAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>EstimatedPrice</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getEstimatedPrice
     * @see #setEstimatedPrice
     */
    public final void removeEstimatedPrice() {
        removeValue(getEstimatedPriceAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getEstimatedPrice
     * @see #setEstimatedPrice
     */
    public final boolean isEstimatedPriceDefaultValue() {
        return isDefaultValue(getEstimatedPriceAttribute(getMtDatabase()));
    }


    /* Attribute 'ReservedPrice' */

    /** Attribute <code>ReservedPrice</code> cache ID */
    private static int reservedPriceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ReservedPrice",CID));

    /**
     * Gets the <code>ReservedPrice</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getReservedPriceAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(reservedPriceCID);
    }


    /**
     * Gets the <code>ReservedPrice</code> attribute value.
     * @return the value
     *
     * @see #setReservedPrice
     * @see #removeReservedPrice
     */
    public final double getReservedPrice() {
        return getDouble(getReservedPriceAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ReservedPrice</code> attribute value.
     * @param val the new value
     *
     * @see #getReservedPrice
     * @see #removeReservedPrice
     */
    public final void setReservedPrice(double val) {
        setDouble(getReservedPriceAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ReservedPrice</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getReservedPrice
     * @see #setReservedPrice
     */
    public final void removeReservedPrice() {
        removeValue(getReservedPriceAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getReservedPrice
     * @see #setReservedPrice
     */
    public final boolean isReservedPriceDefaultValue() {
        return isDefaultValue(getReservedPriceAttribute(getMtDatabase()));
    }


    /* Attribute 'Picture' */

    /** Attribute <code>Picture</code> cache ID */
    private static int pictureCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Picture",CID));

    /**
     * Gets the <code>Picture</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPictureAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(pictureCID);
    }


    /**
     * Gets the <code>Picture</code> attribute value.
     * @return the value
     *
     * @see #setPicture
     * @see #removePicture
     */
    public final String getPicture() {
        return getString(getPictureAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Picture</code> attribute value.
     * @param val the new value
     *
     * @see #getPicture
     * @see #removePicture
     */
    public final void setPicture(String val) {
        setString(getPictureAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Picture</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPicture
     * @see #setPicture
     */
    public final void removePicture() {
        removeValue(getPictureAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getPicture
     * @see #setPicture
     */
    public final boolean isPictureNull() {
        return isNull(getPictureAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPicture
     * @see #setPicture
     */
    public final boolean isPictureDefaultValue() {
        return isDefaultValue(getPictureAttribute(getMtDatabase()));
    }


    /* Attribute 'SoldCheck' */

    /** Attribute <code>SoldCheck</code> cache ID */
    private static int soldCheckCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SoldCheck",CID));

    /**
     * Gets the <code>SoldCheck</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSoldCheckAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(soldCheckCID);
    }


    /**
     * Gets the <code>SoldCheck</code> attribute value.
     * @return the value
     *
     * @see #setSoldCheck
     * @see #removeSoldCheck
     */
    public final boolean getSoldCheck() {
        return getBoolean(getSoldCheckAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SoldCheck</code> attribute value.
     * @param val the new value
     *
     * @see #getSoldCheck
     * @see #removeSoldCheck
     */
    public final void setSoldCheck(boolean val) {
        setBoolean(getSoldCheckAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SoldCheck</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSoldCheck
     * @see #setSoldCheck
     */
    public final void removeSoldCheck() {
        removeValue(getSoldCheckAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getSoldCheck
     * @see #setSoldCheck
     */
    public final boolean isSoldCheckNull() {
        return isNull(getSoldCheckAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSoldCheck
     * @see #setSoldCheck
     */
    public final boolean isSoldCheckDefaultValue() {
        return isDefaultValue(getSoldCheckAttribute(getMtDatabase()));
    }


    /* Attribute 'SoldPrice' */

    /** Attribute <code>SoldPrice</code> cache ID */
    private static int soldPriceCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SoldPrice",CID));

    /**
     * Gets the <code>SoldPrice</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSoldPriceAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(soldPriceCID);
    }


    /**
     * Gets the <code>SoldPrice</code> attribute value.
     * @return the value
     *
     * @see #setSoldPrice
     * @see #removeSoldPrice
     */
    public final int getSoldPrice() {
        return getInteger(getSoldPriceAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SoldPrice</code> attribute value.
     * @param val the new value
     *
     * @see #getSoldPrice
     * @see #removeSoldPrice
     */
    public final void setSoldPrice(int val) {
        setInteger(getSoldPriceAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SoldPrice</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSoldPrice
     * @see #setSoldPrice
     */
    public final void removeSoldPrice() {
        removeValue(getSoldPriceAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getSoldPrice
     * @see #setSoldPrice
     */
    public final boolean isSoldPriceNull() {
        return isNull(getSoldPriceAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSoldPrice
     * @see #setSoldPrice
     */
    public final boolean isSoldPriceDefaultValue() {
        return isDefaultValue(getSoldPriceAttribute(getMtDatabase()));
    }


    /* Attribute 'AuctioneersComments' */

    /** Attribute <code>AuctioneersComments</code> cache ID */
    private static int auctioneersCommentsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AuctioneersComments",CID));

    /**
     * Gets the <code>AuctioneersComments</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctioneersCommentsAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctioneersCommentsCID);
    }


    /**
     * Gets the <code>AuctioneersComments</code> attribute value.
     * @return the value
     *
     * @see #setAuctioneersComments
     * @see #removeAuctioneersComments
     */
    public final String getAuctioneersComments() {
        return getString(getAuctioneersCommentsAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AuctioneersComments</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctioneersComments
     * @see #removeAuctioneersComments
     */
    public final void setAuctioneersComments(String val) {
        setString(getAuctioneersCommentsAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AuctioneersComments</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctioneersComments
     * @see #setAuctioneersComments
     */
    public final void removeAuctioneersComments() {
        removeValue(getAuctioneersCommentsAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAuctioneersComments
     * @see #setAuctioneersComments
     */
    public final boolean isAuctioneersCommentsNull() {
        return isNull(getAuctioneersCommentsAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctioneersComments
     * @see #setAuctioneersComments
     */
    public final boolean isAuctioneersCommentsDefaultValue() {
        return isDefaultValue(getAuctioneersCommentsAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'to_painting' */

    /** Relationship <code>to_painting</code> cache ID */
    private static int to_paintingCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("to_painting",CID));

    /**
     * Gets the <code>to_painting</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getTo_paintingRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(to_paintingCID);
    }

    /**
     * Gets the <code>to_painting</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getTo_paintingSize
     * @see #to_paintingIterator
     * @see #setTo_painting
     * @see #removeTo_painting
     */
    public final PaintingCategory[] getTo_painting() {
        return (PaintingCategory[])getSuccessors(getTo_paintingRelationship(getMtDatabase()), PaintingCategory.class);
    }

    /**
     * Counts the <code>to_painting</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getTo_painting
     * @see #to_paintingIterator
     * @see #setTo_painting
     * @see #removeTo_painting
     */
    public final int getTo_paintingSize() {
        return getSuccessorSize(getTo_paintingRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>to_painting</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getTo_painting
     * @see #getTo_paintingSize
     * @see #setTo_painting
     * @see #removeTo_painting
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> to_paintingIterator() {
        return this.<E>successorIterator(getTo_paintingRelationship(getMtDatabase()), PaintingCategory.class);
    }

    /**
     * Sets the <code>to_painting</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getTo_painting
     * @see #getTo_paintingSize
     * @see #to_paintingIterator
     * @see #removeTo_painting
     */
    public final void setTo_painting(PaintingCategory[] succs) {
        setSuccessors(getTo_paintingRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>to_painting</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_painting
     * @see #getTo_paintingSize
     * @see #to_paintingIterator
     * @see #setTo_painting
     * @see #removeTo_painting
     */
    public final void prependTo_painting(PaintingCategory succ) {
        prependSuccessor(getTo_paintingRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>to_painting</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_painting
     * @see #setTo_painting
     * @see #removeTo_painting
     * @see #getTo_paintingSize
     * @see #to_paintingIterator
     */
    public final void appendTo_painting(PaintingCategory succ) {
        appendSuccessor(getTo_paintingRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>to_painting</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getTo_painting
     * @see #setTo_painting
     * @see #removeTo_painting
     * @see #getTo_paintingSize
     * @see #to_paintingIterator
     */
    public final void appendTo_painting(PaintingCategory[] succs) {
        addSuccessors(getTo_paintingRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>to_painting</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getTo_painting
     * @see #setTo_painting
     * @see #getTo_paintingSize
     * @see #to_paintingIterator
     */
    public void removeTo_painting(PaintingCategory[] succs) {
        removeSuccessors(getTo_paintingRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>to_painting</code> successors list.
     * @param succ the object to remove
     *
     * @see #getTo_painting
     * @see #setTo_painting
     * @see #getTo_paintingSize
     * @see #to_paintingIterator
     */
    public void removeTo_painting(PaintingCategory succ) {
        removeSuccessor(getTo_paintingRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>to_painting</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearTo_painting() {
        clearSuccessors(getTo_paintingRelationship(getMtDatabase()));
    }


    /* Relationship 'to_drawing' */

    /** Relationship <code>to_drawing</code> cache ID */
    private static int to_drawingCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("to_drawing",CID));

    /**
     * Gets the <code>to_drawing</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getTo_drawingRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(to_drawingCID);
    }

    /**
     * Gets the <code>to_drawing</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getTo_drawingSize
     * @see #to_drawingIterator
     * @see #setTo_drawing
     * @see #removeTo_drawing
     */
    public final DrawingCategory[] getTo_drawing() {
        return (DrawingCategory[])getSuccessors(getTo_drawingRelationship(getMtDatabase()), DrawingCategory.class);
    }

    /**
     * Counts the <code>to_drawing</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getTo_drawing
     * @see #to_drawingIterator
     * @see #setTo_drawing
     * @see #removeTo_drawing
     */
    public final int getTo_drawingSize() {
        return getSuccessorSize(getTo_drawingRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>to_drawing</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getTo_drawing
     * @see #getTo_drawingSize
     * @see #setTo_drawing
     * @see #removeTo_drawing
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> to_drawingIterator() {
        return this.<E>successorIterator(getTo_drawingRelationship(getMtDatabase()), DrawingCategory.class);
    }

    /**
     * Sets the <code>to_drawing</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getTo_drawing
     * @see #getTo_drawingSize
     * @see #to_drawingIterator
     * @see #removeTo_drawing
     */
    public final void setTo_drawing(DrawingCategory[] succs) {
        setSuccessors(getTo_drawingRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>to_drawing</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_drawing
     * @see #getTo_drawingSize
     * @see #to_drawingIterator
     * @see #setTo_drawing
     * @see #removeTo_drawing
     */
    public final void prependTo_drawing(DrawingCategory succ) {
        prependSuccessor(getTo_drawingRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>to_drawing</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_drawing
     * @see #setTo_drawing
     * @see #removeTo_drawing
     * @see #getTo_drawingSize
     * @see #to_drawingIterator
     */
    public final void appendTo_drawing(DrawingCategory succ) {
        appendSuccessor(getTo_drawingRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>to_drawing</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getTo_drawing
     * @see #setTo_drawing
     * @see #removeTo_drawing
     * @see #getTo_drawingSize
     * @see #to_drawingIterator
     */
    public final void appendTo_drawing(DrawingCategory[] succs) {
        addSuccessors(getTo_drawingRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>to_drawing</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getTo_drawing
     * @see #setTo_drawing
     * @see #getTo_drawingSize
     * @see #to_drawingIterator
     */
    public void removeTo_drawing(DrawingCategory[] succs) {
        removeSuccessors(getTo_drawingRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>to_drawing</code> successors list.
     * @param succ the object to remove
     *
     * @see #getTo_drawing
     * @see #setTo_drawing
     * @see #getTo_drawingSize
     * @see #to_drawingIterator
     */
    public void removeTo_drawing(DrawingCategory succ) {
        removeSuccessor(getTo_drawingRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>to_drawing</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearTo_drawing() {
        clearSuccessors(getTo_drawingRelationship(getMtDatabase()));
    }


    /* Relationship 'target_auction' */

    /** Relationship <code>target_auction</code> cache ID */
    private static int target_auctionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("target_auction",CID));

    /**
     * Gets the <code>target_auction</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getTarget_auctionRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(target_auctionCID);
    }

    /**
     * Gets the <code>target_auction</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getTarget_auctionSize
     * @see #target_auctionIterator
     * @see #setTarget_auction
     * @see #removeTarget_auction
     */
    public final AuctionDetails[] getTarget_auction() {
        return (AuctionDetails[])getSuccessors(getTarget_auctionRelationship(getMtDatabase()), AuctionDetails.class);
    }

    /**
     * Counts the <code>target_auction</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getTarget_auction
     * @see #target_auctionIterator
     * @see #setTarget_auction
     * @see #removeTarget_auction
     */
    public final int getTarget_auctionSize() {
        return getSuccessorSize(getTarget_auctionRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>target_auction</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getTarget_auction
     * @see #getTarget_auctionSize
     * @see #setTarget_auction
     * @see #removeTarget_auction
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> target_auctionIterator() {
        return this.<E>successorIterator(getTarget_auctionRelationship(getMtDatabase()), AuctionDetails.class);
    }

    /**
     * Sets the <code>target_auction</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getTarget_auction
     * @see #getTarget_auctionSize
     * @see #target_auctionIterator
     * @see #removeTarget_auction
     */
    public final void setTarget_auction(AuctionDetails[] succs) {
        setSuccessors(getTarget_auctionRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>target_auction</code> successors list.
     * @param succ the object to add
     *
     * @see #getTarget_auction
     * @see #getTarget_auctionSize
     * @see #target_auctionIterator
     * @see #setTarget_auction
     * @see #removeTarget_auction
     */
    public final void prependTarget_auction(AuctionDetails succ) {
        prependSuccessor(getTarget_auctionRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>target_auction</code> successors list.
     * @param succ the object to add
     *
     * @see #getTarget_auction
     * @see #setTarget_auction
     * @see #removeTarget_auction
     * @see #getTarget_auctionSize
     * @see #target_auctionIterator
     */
    public final void appendTarget_auction(AuctionDetails succ) {
        appendSuccessor(getTarget_auctionRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>target_auction</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getTarget_auction
     * @see #setTarget_auction
     * @see #removeTarget_auction
     * @see #getTarget_auctionSize
     * @see #target_auctionIterator
     */
    public final void appendTarget_auction(AuctionDetails[] succs) {
        addSuccessors(getTarget_auctionRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>target_auction</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getTarget_auction
     * @see #setTarget_auction
     * @see #getTarget_auctionSize
     * @see #target_auctionIterator
     */
    public void removeTarget_auction(AuctionDetails[] succs) {
        removeSuccessors(getTarget_auctionRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>target_auction</code> successors list.
     * @param succ the object to remove
     *
     * @see #getTarget_auction
     * @see #setTarget_auction
     * @see #getTarget_auctionSize
     * @see #target_auctionIterator
     */
    public void removeTarget_auction(AuctionDetails succ) {
        removeSuccessor(getTarget_auctionRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>target_auction</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearTarget_auction() {
        clearSuccessors(getTarget_auctionRelationship(getMtDatabase()));
    }


    /* Relationship 'to_photo' */

    /** Relationship <code>to_photo</code> cache ID */
    private static int to_photoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("to_photo",CID));

    /**
     * Gets the <code>to_photo</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getTo_photoRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(to_photoCID);
    }

    /**
     * Gets the <code>to_photo</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getTo_photoSize
     * @see #to_photoIterator
     * @see #setTo_photo
     * @see #removeTo_photo
     */
    public final PhotographicCategory[] getTo_photo() {
        return (PhotographicCategory[])getSuccessors(getTo_photoRelationship(getMtDatabase()), PhotographicCategory.class);
    }

    /**
     * Counts the <code>to_photo</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getTo_photo
     * @see #to_photoIterator
     * @see #setTo_photo
     * @see #removeTo_photo
     */
    public final int getTo_photoSize() {
        return getSuccessorSize(getTo_photoRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>to_photo</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getTo_photo
     * @see #getTo_photoSize
     * @see #setTo_photo
     * @see #removeTo_photo
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> to_photoIterator() {
        return this.<E>successorIterator(getTo_photoRelationship(getMtDatabase()), PhotographicCategory.class);
    }

    /**
     * Sets the <code>to_photo</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getTo_photo
     * @see #getTo_photoSize
     * @see #to_photoIterator
     * @see #removeTo_photo
     */
    public final void setTo_photo(PhotographicCategory[] succs) {
        setSuccessors(getTo_photoRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>to_photo</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_photo
     * @see #getTo_photoSize
     * @see #to_photoIterator
     * @see #setTo_photo
     * @see #removeTo_photo
     */
    public final void prependTo_photo(PhotographicCategory succ) {
        prependSuccessor(getTo_photoRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>to_photo</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_photo
     * @see #setTo_photo
     * @see #removeTo_photo
     * @see #getTo_photoSize
     * @see #to_photoIterator
     */
    public final void appendTo_photo(PhotographicCategory succ) {
        appendSuccessor(getTo_photoRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>to_photo</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getTo_photo
     * @see #setTo_photo
     * @see #removeTo_photo
     * @see #getTo_photoSize
     * @see #to_photoIterator
     */
    public final void appendTo_photo(PhotographicCategory[] succs) {
        addSuccessors(getTo_photoRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>to_photo</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getTo_photo
     * @see #setTo_photo
     * @see #getTo_photoSize
     * @see #to_photoIterator
     */
    public void removeTo_photo(PhotographicCategory[] succs) {
        removeSuccessors(getTo_photoRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>to_photo</code> successors list.
     * @param succ the object to remove
     *
     * @see #getTo_photo
     * @see #setTo_photo
     * @see #getTo_photoSize
     * @see #to_photoIterator
     */
    public void removeTo_photo(PhotographicCategory succ) {
        removeSuccessor(getTo_photoRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>to_photo</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearTo_photo() {
        clearSuccessors(getTo_photoRelationship(getMtDatabase()));
    }


    /* Relationship 'to_sculpture' */

    /** Relationship <code>to_sculpture</code> cache ID */
    private static int to_sculptureCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("to_sculpture",CID));

    /**
     * Gets the <code>to_sculpture</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getTo_sculptureRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(to_sculptureCID);
    }

    /**
     * Gets the <code>to_sculpture</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getTo_sculptureSize
     * @see #to_sculptureIterator
     * @see #setTo_sculpture
     * @see #removeTo_sculpture
     */
    public final SculptureCategory[] getTo_sculpture() {
        return (SculptureCategory[])getSuccessors(getTo_sculptureRelationship(getMtDatabase()), SculptureCategory.class);
    }

    /**
     * Counts the <code>to_sculpture</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getTo_sculpture
     * @see #to_sculptureIterator
     * @see #setTo_sculpture
     * @see #removeTo_sculpture
     */
    public final int getTo_sculptureSize() {
        return getSuccessorSize(getTo_sculptureRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>to_sculpture</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getTo_sculpture
     * @see #getTo_sculptureSize
     * @see #setTo_sculpture
     * @see #removeTo_sculpture
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> to_sculptureIterator() {
        return this.<E>successorIterator(getTo_sculptureRelationship(getMtDatabase()), SculptureCategory.class);
    }

    /**
     * Sets the <code>to_sculpture</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getTo_sculpture
     * @see #getTo_sculptureSize
     * @see #to_sculptureIterator
     * @see #removeTo_sculpture
     */
    public final void setTo_sculpture(SculptureCategory[] succs) {
        setSuccessors(getTo_sculptureRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>to_sculpture</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_sculpture
     * @see #getTo_sculptureSize
     * @see #to_sculptureIterator
     * @see #setTo_sculpture
     * @see #removeTo_sculpture
     */
    public final void prependTo_sculpture(SculptureCategory succ) {
        prependSuccessor(getTo_sculptureRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>to_sculpture</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_sculpture
     * @see #setTo_sculpture
     * @see #removeTo_sculpture
     * @see #getTo_sculptureSize
     * @see #to_sculptureIterator
     */
    public final void appendTo_sculpture(SculptureCategory succ) {
        appendSuccessor(getTo_sculptureRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>to_sculpture</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getTo_sculpture
     * @see #setTo_sculpture
     * @see #removeTo_sculpture
     * @see #getTo_sculptureSize
     * @see #to_sculptureIterator
     */
    public final void appendTo_sculpture(SculptureCategory[] succs) {
        addSuccessors(getTo_sculptureRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>to_sculpture</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getTo_sculpture
     * @see #setTo_sculpture
     * @see #getTo_sculptureSize
     * @see #to_sculptureIterator
     */
    public void removeTo_sculpture(SculptureCategory[] succs) {
        removeSuccessors(getTo_sculptureRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>to_sculpture</code> successors list.
     * @param succ the object to remove
     *
     * @see #getTo_sculpture
     * @see #setTo_sculpture
     * @see #getTo_sculptureSize
     * @see #to_sculptureIterator
     */
    public void removeTo_sculpture(SculptureCategory succ) {
        removeSuccessor(getTo_sculptureRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>to_sculpture</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearTo_sculpture() {
        clearSuccessors(getTo_sculptureRelationship(getMtDatabase()));
    }


    /* Relationship 'to_carving' */

    /** Relationship <code>to_carving</code> cache ID */
    private static int to_carvingCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("to_carving",CID));

    /**
     * Gets the <code>to_carving</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getTo_carvingRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(to_carvingCID);
    }

    /**
     * Gets the <code>to_carving</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getTo_carvingSize
     * @see #to_carvingIterator
     * @see #setTo_carving
     * @see #removeTo_carving
     */
    public final CarvingCategory[] getTo_carving() {
        return (CarvingCategory[])getSuccessors(getTo_carvingRelationship(getMtDatabase()), CarvingCategory.class);
    }

    /**
     * Counts the <code>to_carving</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getTo_carving
     * @see #to_carvingIterator
     * @see #setTo_carving
     * @see #removeTo_carving
     */
    public final int getTo_carvingSize() {
        return getSuccessorSize(getTo_carvingRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>to_carving</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getTo_carving
     * @see #getTo_carvingSize
     * @see #setTo_carving
     * @see #removeTo_carving
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> to_carvingIterator() {
        return this.<E>successorIterator(getTo_carvingRelationship(getMtDatabase()), CarvingCategory.class);
    }

    /**
     * Sets the <code>to_carving</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getTo_carving
     * @see #getTo_carvingSize
     * @see #to_carvingIterator
     * @see #removeTo_carving
     */
    public final void setTo_carving(CarvingCategory[] succs) {
        setSuccessors(getTo_carvingRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>to_carving</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_carving
     * @see #getTo_carvingSize
     * @see #to_carvingIterator
     * @see #setTo_carving
     * @see #removeTo_carving
     */
    public final void prependTo_carving(CarvingCategory succ) {
        prependSuccessor(getTo_carvingRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>to_carving</code> successors list.
     * @param succ the object to add
     *
     * @see #getTo_carving
     * @see #setTo_carving
     * @see #removeTo_carving
     * @see #getTo_carvingSize
     * @see #to_carvingIterator
     */
    public final void appendTo_carving(CarvingCategory succ) {
        appendSuccessor(getTo_carvingRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>to_carving</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getTo_carving
     * @see #setTo_carving
     * @see #removeTo_carving
     * @see #getTo_carvingSize
     * @see #to_carvingIterator
     */
    public final void appendTo_carving(CarvingCategory[] succs) {
        addSuccessors(getTo_carvingRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>to_carving</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getTo_carving
     * @see #setTo_carving
     * @see #getTo_carvingSize
     * @see #to_carvingIterator
     */
    public void removeTo_carving(CarvingCategory[] succs) {
        removeSuccessors(getTo_carvingRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>to_carving</code> successors list.
     * @param succ the object to remove
     *
     * @see #getTo_carving
     * @see #setTo_carving
     * @see #getTo_carvingSize
     * @see #to_carvingIterator
     */
    public void removeTo_carving(CarvingCategory succ) {
        removeSuccessor(getTo_carvingRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>to_carving</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearTo_carving() {
        clearSuccessors(getTo_carvingRelationship(getMtDatabase()));
    }


    /* Relationship 'bought_from' */

    /** Relationship <code>bought_from</code> cache ID */
    private static int bought_fromCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("bought_from",CID));

    /**
     * Gets the <code>bought_from</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getBought_fromRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(bought_fromCID);
    }

    /**
     * Gets the <code>bought_from</code> sucessor object.
     * @return an object 
     */
    public final BuyerClient getBought_from() {
        return (BuyerClient)getSuccessor(getBought_fromRelationship(getMtDatabase()));
    }


    /* Relationship 'actual_seller' */

    /** Relationship <code>actual_seller</code> cache ID */
    private static int actual_sellerCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("actual_seller",CID));

    /**
     * Gets the <code>actual_seller</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getActual_sellerRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(actual_sellerCID);
    }

    /**
     * Gets the <code>actual_seller</code> sucessor object.
     * @return an object 
     */
    public final SellerClient getActual_seller() {
        return (SellerClient)getSuccessor(getActual_sellerRelationship(getMtDatabase()));
    }


    /* Relationship 'checked_by' */

    /** Relationship <code>checked_by</code> cache ID */
    private static int checked_byCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("checked_by",CID));

    /**
     * Gets the <code>checked_by</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getChecked_byRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(checked_byCID);
    }

    /**
     * Gets the <code>checked_by</code> sucessor object.
     * @return an object 
     */
    public final Appraiser getChecked_by() {
        return (Appraiser)getSuccessor(getChecked_byRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public ArtItem(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[ArtItem]";
    }
}
