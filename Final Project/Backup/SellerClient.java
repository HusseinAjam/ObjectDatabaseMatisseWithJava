/*
 * SellerClient.java
 *
 * Generated with Matisse Schema Definition Language 9.1.8
 * Generation date: Thu Apr 07 21:16:54 2016
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>SellerClient</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class SellerClient extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.8
     * Generation Date: Thu Apr 07 21:16:54 2016
     */

    /*
     * Class variables and methods
     */

    /** Class <code>SellerClient</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("SellerClient"));

    /**
     * Gets the <code>SellerClient</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public SellerClient(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected SellerClient(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(SellerClient.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, SellerClient.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(SellerClient.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, SellerClient.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'SellerFirstName' */

    /** Attribute <code>SellerFirstName</code> cache ID */
    private static int sellerFirstNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SellerFirstName",CID));

    /**
     * Gets the <code>SellerFirstName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerFirstNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerFirstNameCID);
    }


    /**
     * Gets the <code>SellerFirstName</code> attribute value.
     * @return the value
     *
     * @see #setSellerFirstName
     * @see #removeSellerFirstName
     */
    public final String getSellerFirstName() {
        return getString(getSellerFirstNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SellerFirstName</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerFirstName
     * @see #removeSellerFirstName
     */
    public final void setSellerFirstName(String val) {
        setString(getSellerFirstNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SellerFirstName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerFirstName
     * @see #setSellerFirstName
     */
    public final void removeSellerFirstName() {
        removeValue(getSellerFirstNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerFirstName
     * @see #setSellerFirstName
     */
    public final boolean isSellerFirstNameDefaultValue() {
        return isDefaultValue(getSellerFirstNameAttribute(getMtDatabase()));
    }


    /* Attribute 'SellerSurname' */

    /** Attribute <code>SellerSurname</code> cache ID */
    private static int sellerSurnameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SellerSurname",CID));

    /**
     * Gets the <code>SellerSurname</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerSurnameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerSurnameCID);
    }


    /**
     * Gets the <code>SellerSurname</code> attribute value.
     * @return the value
     *
     * @see #setSellerSurname
     * @see #removeSellerSurname
     */
    public final String getSellerSurname() {
        return getString(getSellerSurnameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SellerSurname</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerSurname
     * @see #removeSellerSurname
     */
    public final void setSellerSurname(String val) {
        setString(getSellerSurnameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SellerSurname</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerSurname
     * @see #setSellerSurname
     */
    public final void removeSellerSurname() {
        removeValue(getSellerSurnameAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getSellerSurname
     * @see #setSellerSurname
     */
    public final boolean isSellerSurnameNull() {
        return isNull(getSellerSurnameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerSurname
     * @see #setSellerSurname
     */
    public final boolean isSellerSurnameDefaultValue() {
        return isDefaultValue(getSellerSurnameAttribute(getMtDatabase()));
    }


    /* Attribute 'SellerId' */

    /** Attribute <code>SellerId</code> cache ID */
    private static int sellerIdCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SellerId",CID));

    /**
     * Gets the <code>SellerId</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerIdAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerIdCID);
    }


    /**
     * Gets the <code>SellerId</code> attribute value.
     * @return the value
     *
     * @see #setSellerId
     * @see #removeSellerId
     */
    public final int getSellerId() {
        return getInteger(getSellerIdAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SellerId</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerId
     * @see #removeSellerId
     */
    public final void setSellerId(int val) {
        setInteger(getSellerIdAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SellerId</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerId
     * @see #setSellerId
     */
    public final void removeSellerId() {
        removeValue(getSellerIdAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerId
     * @see #setSellerId
     */
    public final boolean isSellerIdDefaultValue() {
        return isDefaultValue(getSellerIdAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findSellerClient' of attribute 'SellerId' */

    /** EntryPointDictionary <code>findSellerClient</code> cache ID */
    private static int findSellerClientDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findSellerClient"));

    /**
     * Gets the <code>findSellerClient</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindSellerClientDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findSellerClientDictionaryCID);
    }

    /**
     * Finds the <code>SellerClient</code> object where <code>SellerId</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>SellerClient</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static SellerClient lookupFindSellerClient(com.matisse.MtDatabase db, String value) {
        return (SellerClient)getFindSellerClientDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>SellerClient</code> objects where <code>SellerId</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findSellerClientIterator(com.matisse.MtDatabase db, String value) {
        return getFindSellerClientDictionary(db).<E>iterator(value, getClass(db), SellerClient.class);
    }

    /**
     * Creates an iterator on all <code>SellerClient</code> objects where <code>SellerId</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findSellerClientIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindSellerClientDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, SellerClient.class);
    }


    /* Attribute 'SellerEmail' */

    /** Attribute <code>SellerEmail</code> cache ID */
    private static int sellerEmailCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SellerEmail",CID));

    /**
     * Gets the <code>SellerEmail</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerEmailAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerEmailCID);
    }


    /**
     * Gets the <code>SellerEmail</code> attribute value.
     * @return the value
     *
     * @see #setSellerEmail
     * @see #removeSellerEmail
     */
    public final String getSellerEmail() {
        return getString(getSellerEmailAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SellerEmail</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerEmail
     * @see #removeSellerEmail
     */
    public final void setSellerEmail(String val) {
        setString(getSellerEmailAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SellerEmail</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerEmail
     * @see #setSellerEmail
     */
    public final void removeSellerEmail() {
        removeValue(getSellerEmailAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerEmail
     * @see #setSellerEmail
     */
    public final boolean isSellerEmailDefaultValue() {
        return isDefaultValue(getSellerEmailAttribute(getMtDatabase()));
    }


    /* Attribute 'SellerBankDetail' */

    /** Attribute <code>SellerBankDetail</code> cache ID */
    private static int sellerBankDetailCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SellerBankDetail",CID));

    /**
     * Gets the <code>SellerBankDetail</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerBankDetailAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerBankDetailCID);
    }


    /**
     * Gets the <code>SellerBankDetail</code> attribute value.
     * @return the value
     *
     * @see #setSellerBankDetail
     * @see #removeSellerBankDetail
     */
    public final String getSellerBankDetail() {
        return getString(getSellerBankDetailAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SellerBankDetail</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerBankDetail
     * @see #removeSellerBankDetail
     */
    public final void setSellerBankDetail(String val) {
        setString(getSellerBankDetailAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SellerBankDetail</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerBankDetail
     * @see #setSellerBankDetail
     */
    public final void removeSellerBankDetail() {
        removeValue(getSellerBankDetailAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerBankDetail
     * @see #setSellerBankDetail
     */
    public final boolean isSellerBankDetailDefaultValue() {
        return isDefaultValue(getSellerBankDetailAttribute(getMtDatabase()));
    }


    /* Attribute 'SellerAddress' */

    /** Attribute <code>SellerAddress</code> cache ID */
    private static int sellerAddressCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SellerAddress",CID));

    /**
     * Gets the <code>SellerAddress</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerAddressAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerAddressCID);
    }


    /**
     * Gets the <code>SellerAddress</code> attribute value.
     * @return the value
     *
     * @see #setSellerAddress
     * @see #removeSellerAddress
     */
    public final String getSellerAddress() {
        return getString(getSellerAddressAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SellerAddress</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerAddress
     * @see #removeSellerAddress
     */
    public final void setSellerAddress(String val) {
        setString(getSellerAddressAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SellerAddress</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerAddress
     * @see #setSellerAddress
     */
    public final void removeSellerAddress() {
        removeValue(getSellerAddressAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getSellerAddress
     * @see #setSellerAddress
     */
    public final boolean isSellerAddressNull() {
        return isNull(getSellerAddressAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerAddress
     * @see #setSellerAddress
     */
    public final boolean isSellerAddressDefaultValue() {
        return isDefaultValue(getSellerAddressAttribute(getMtDatabase()));
    }


    /* Attribute 'SellerTitle' */

    /** Attribute <code>SellerTitle</code> cache ID */
    private static int sellerTitleCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SellerTitle",CID));

    /**
     * Gets the <code>SellerTitle</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerTitleAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerTitleCID);
    }


    /**
     * Gets the <code>SellerTitle</code> attribute value.
     * @return the value
     *
     * @see #setSellerTitle
     * @see #removeSellerTitle
     */
    public final String getSellerTitle() {
        return getString(getSellerTitleAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SellerTitle</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerTitle
     * @see #removeSellerTitle
     */
    public final void setSellerTitle(String val) {
        setString(getSellerTitleAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SellerTitle</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerTitle
     * @see #setSellerTitle
     */
    public final void removeSellerTitle() {
        removeValue(getSellerTitleAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getSellerTitle
     * @see #setSellerTitle
     */
    public final boolean isSellerTitleNull() {
        return isNull(getSellerTitleAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerTitle
     * @see #setSellerTitle
     */
    public final boolean isSellerTitleDefaultValue() {
        return isDefaultValue(getSellerTitleAttribute(getMtDatabase()));
    }


    /* Attribute 'SellerPhone' */

    /** Attribute <code>SellerPhone</code> cache ID */
    private static int sellerPhoneCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SellerPhone",CID));

    /**
     * Gets the <code>SellerPhone</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerPhoneAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerPhoneCID);
    }


    /**
     * Gets the <code>SellerPhone</code> attribute value.
     * @return the value
     *
     * @see #setSellerPhone
     * @see #removeSellerPhone
     */
    public final String getSellerPhone() {
        return getString(getSellerPhoneAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SellerPhone</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerPhone
     * @see #removeSellerPhone
     */
    public final void setSellerPhone(String val) {
        setString(getSellerPhoneAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SellerPhone</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerPhone
     * @see #setSellerPhone
     */
    public final void removeSellerPhone() {
        removeValue(getSellerPhoneAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getSellerPhone
     * @see #setSellerPhone
     */
    public final boolean isSellerPhoneNull() {
        return isNull(getSellerPhoneAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerPhone
     * @see #setSellerPhone
     */
    public final boolean isSellerPhoneDefaultValue() {
        return isDefaultValue(getSellerPhoneAttribute(getMtDatabase()));
    }


    /* Attribute 'SellerBankSortCode' */

    /** Attribute <code>SellerBankSortCode</code> cache ID */
    private static int sellerBankSortCodeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SellerBankSortCode",CID));

    /**
     * Gets the <code>SellerBankSortCode</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSellerBankSortCodeAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sellerBankSortCodeCID);
    }


    /**
     * Gets the <code>SellerBankSortCode</code> attribute value.
     * @return the value
     *
     * @see #setSellerBankSortCode
     * @see #removeSellerBankSortCode
     */
    public final String getSellerBankSortCode() {
        return getString(getSellerBankSortCodeAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SellerBankSortCode</code> attribute value.
     * @param val the new value
     *
     * @see #getSellerBankSortCode
     * @see #removeSellerBankSortCode
     */
    public final void setSellerBankSortCode(String val) {
        setString(getSellerBankSortCodeAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SellerBankSortCode</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSellerBankSortCode
     * @see #setSellerBankSortCode
     */
    public final void removeSellerBankSortCode() {
        removeValue(getSellerBankSortCodeAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getSellerBankSortCode
     * @see #setSellerBankSortCode
     */
    public final boolean isSellerBankSortCodeNull() {
        return isNull(getSellerBankSortCodeAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSellerBankSortCode
     * @see #setSellerBankSortCode
     */
    public final boolean isSellerBankSortCodeDefaultValue() {
        return isDefaultValue(getSellerBankSortCodeAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'sells' */

    /** Relationship <code>sells</code> cache ID */
    private static int sellsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("sells",CID));

    /**
     * Gets the <code>sells</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getSellsRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(sellsCID);
    }

    /**
     * Gets the <code>sells</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getSellsSize
     * @see #sellsIterator
     * @see #setSells
     * @see #removeSells
     */
    public final ArtItem[] getSells() {
        return (ArtItem[])getSuccessors(getSellsRelationship(getMtDatabase()), ArtItem.class);
    }

    /**
     * Counts the <code>sells</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getSells
     * @see #sellsIterator
     * @see #setSells
     * @see #removeSells
     */
    public final int getSellsSize() {
        return getSuccessorSize(getSellsRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>sells</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getSells
     * @see #getSellsSize
     * @see #setSells
     * @see #removeSells
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> sellsIterator() {
        return this.<E>successorIterator(getSellsRelationship(getMtDatabase()), ArtItem.class);
    }

    /**
     * Sets the <code>sells</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getSells
     * @see #getSellsSize
     * @see #sellsIterator
     * @see #removeSells
     */
    public final void setSells(ArtItem[] succs) {
        setSuccessors(getSellsRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>sells</code> successors list.
     * @param succ the object to add
     *
     * @see #getSells
     * @see #getSellsSize
     * @see #sellsIterator
     * @see #setSells
     * @see #removeSells
     */
    public final void prependSells(ArtItem succ) {
        prependSuccessor(getSellsRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>sells</code> successors list.
     * @param succ the object to add
     *
     * @see #getSells
     * @see #setSells
     * @see #removeSells
     * @see #getSellsSize
     * @see #sellsIterator
     */
    public final void appendSells(ArtItem succ) {
        appendSuccessor(getSellsRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>sells</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getSells
     * @see #setSells
     * @see #removeSells
     * @see #getSellsSize
     * @see #sellsIterator
     */
    public final void appendSells(ArtItem[] succs) {
        addSuccessors(getSellsRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>sells</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getSells
     * @see #setSells
     * @see #getSellsSize
     * @see #sellsIterator
     */
    public void removeSells(ArtItem[] succs) {
        removeSuccessors(getSellsRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>sells</code> successors list.
     * @param succ the object to remove
     *
     * @see #getSells
     * @see #setSells
     * @see #getSellsSize
     * @see #sellsIterator
     */
    public void removeSells(ArtItem succ) {
        removeSuccessor(getSellsRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>sells</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearSells() {
        clearSuccessors(getSellsRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public SellerClient(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[SellerClient]";
    }
}
