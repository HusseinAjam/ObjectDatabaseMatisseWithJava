/*
 * BuyerClient.java
 *
 * Generated with Matisse Schema Definition Language 9.1.8
 * Generation date: Thu Apr 07 21:16:54 2016
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>BuyerClient</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class BuyerClient extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.8
     * Generation Date: Thu Apr 07 21:16:54 2016
     */

    /*
     * Class variables and methods
     */

    /** Class <code>BuyerClient</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("BuyerClient"));

    /**
     * Gets the <code>BuyerClient</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public BuyerClient(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected BuyerClient(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(BuyerClient.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, BuyerClient.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(BuyerClient.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, BuyerClient.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'BID' */

    /** Attribute <code>BID</code> cache ID */
    private static int bIDCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BID",CID));

    /**
     * Gets the <code>BID</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBIDAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bIDCID);
    }


    /**
     * Gets the <code>BID</code> attribute value.
     * @return the value
     *
     * @see #setBID
     * @see #removeBID
     */
    public final int getBID() {
        return getInteger(getBIDAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BID</code> attribute value.
     * @param val the new value
     *
     * @see #getBID
     * @see #removeBID
     */
    public final void setBID(int val) {
        setInteger(getBIDAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BID</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBID
     * @see #setBID
     */
    public final void removeBID() {
        removeValue(getBIDAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBID
     * @see #setBID
     */
    public final boolean isBIDDefaultValue() {
        return isDefaultValue(getBIDAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findBuyerClient' of attribute 'BID' */

    /** EntryPointDictionary <code>findBuyerClient</code> cache ID */
    private static int findBuyerClientDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findBuyerClient"));

    /**
     * Gets the <code>findBuyerClient</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindBuyerClientDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findBuyerClientDictionaryCID);
    }

    /**
     * Finds the <code>BuyerClient</code> object where <code>BID</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>BuyerClient</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static BuyerClient lookupFindBuyerClient(com.matisse.MtDatabase db, String value) {
        return (BuyerClient)getFindBuyerClientDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>BuyerClient</code> objects where <code>BID</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findBuyerClientIterator(com.matisse.MtDatabase db, String value) {
        return getFindBuyerClientDictionary(db).<E>iterator(value, getClass(db), BuyerClient.class);
    }

    /**
     * Creates an iterator on all <code>BuyerClient</code> objects where <code>BID</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findBuyerClientIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindBuyerClientDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, BuyerClient.class);
    }


    /* Attribute 'BTitle' */

    /** Attribute <code>BTitle</code> cache ID */
    private static int bTitleCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BTitle",CID));

    /**
     * Gets the <code>BTitle</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBTitleAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bTitleCID);
    }


    /**
     * Gets the <code>BTitle</code> attribute value.
     * @return the value
     *
     * @see #setBTitle
     * @see #removeBTitle
     */
    public final String getBTitle() {
        return getString(getBTitleAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BTitle</code> attribute value.
     * @param val the new value
     *
     * @see #getBTitle
     * @see #removeBTitle
     */
    public final void setBTitle(String val) {
        setString(getBTitleAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BTitle</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBTitle
     * @see #setBTitle
     */
    public final void removeBTitle() {
        removeValue(getBTitleAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBTitle
     * @see #setBTitle
     */
    public final boolean isBTitleDefaultValue() {
        return isDefaultValue(getBTitleAttribute(getMtDatabase()));
    }


    /* Attribute 'BFirstName' */

    /** Attribute <code>BFirstName</code> cache ID */
    private static int bFirstNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BFirstName",CID));

    /**
     * Gets the <code>BFirstName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBFirstNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bFirstNameCID);
    }


    /**
     * Gets the <code>BFirstName</code> attribute value.
     * @return the value
     *
     * @see #setBFirstName
     * @see #removeBFirstName
     */
    public final String getBFirstName() {
        return getString(getBFirstNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BFirstName</code> attribute value.
     * @param val the new value
     *
     * @see #getBFirstName
     * @see #removeBFirstName
     */
    public final void setBFirstName(String val) {
        setString(getBFirstNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BFirstName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBFirstName
     * @see #setBFirstName
     */
    public final void removeBFirstName() {
        removeValue(getBFirstNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBFirstName
     * @see #setBFirstName
     */
    public final boolean isBFirstNameDefaultValue() {
        return isDefaultValue(getBFirstNameAttribute(getMtDatabase()));
    }


    /* Attribute 'BLastName' */

    /** Attribute <code>BLastName</code> cache ID */
    private static int bLastNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BLastName",CID));

    /**
     * Gets the <code>BLastName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBLastNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bLastNameCID);
    }


    /**
     * Gets the <code>BLastName</code> attribute value.
     * @return the value
     *
     * @see #setBLastName
     * @see #removeBLastName
     */
    public final String getBLastName() {
        return getString(getBLastNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BLastName</code> attribute value.
     * @param val the new value
     *
     * @see #getBLastName
     * @see #removeBLastName
     */
    public final void setBLastName(String val) {
        setString(getBLastNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BLastName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBLastName
     * @see #setBLastName
     */
    public final void removeBLastName() {
        removeValue(getBLastNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBLastName
     * @see #setBLastName
     */
    public final boolean isBLastNameDefaultValue() {
        return isDefaultValue(getBLastNameAttribute(getMtDatabase()));
    }


    /* Attribute 'BAddress' */

    /** Attribute <code>BAddress</code> cache ID */
    private static int bAddressCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BAddress",CID));

    /**
     * Gets the <code>BAddress</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBAddressAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bAddressCID);
    }


    /**
     * Gets the <code>BAddress</code> attribute value.
     * @return the value
     *
     * @see #setBAddress
     * @see #removeBAddress
     */
    public final String getBAddress() {
        return getString(getBAddressAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BAddress</code> attribute value.
     * @param val the new value
     *
     * @see #getBAddress
     * @see #removeBAddress
     */
    public final void setBAddress(String val) {
        setString(getBAddressAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BAddress</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBAddress
     * @see #setBAddress
     */
    public final void removeBAddress() {
        removeValue(getBAddressAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBAddress
     * @see #setBAddress
     */
    public final boolean isBAddressDefaultValue() {
        return isDefaultValue(getBAddressAttribute(getMtDatabase()));
    }


    /* Attribute 'BPhone' */

    /** Attribute <code>BPhone</code> cache ID */
    private static int bPhoneCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BPhone",CID));

    /**
     * Gets the <code>BPhone</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBPhoneAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bPhoneCID);
    }


    /**
     * Gets the <code>BPhone</code> attribute value.
     * @return the value
     *
     * @see #setBPhone
     * @see #removeBPhone
     */
    public final String getBPhone() {
        return getString(getBPhoneAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BPhone</code> attribute value.
     * @param val the new value
     *
     * @see #getBPhone
     * @see #removeBPhone
     */
    public final void setBPhone(String val) {
        setString(getBPhoneAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BPhone</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBPhone
     * @see #setBPhone
     */
    public final void removeBPhone() {
        removeValue(getBPhoneAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBPhone
     * @see #setBPhone
     */
    public final boolean isBPhoneDefaultValue() {
        return isDefaultValue(getBPhoneAttribute(getMtDatabase()));
    }


    /* Attribute 'BEmail' */

    /** Attribute <code>BEmail</code> cache ID */
    private static int bEmailCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BEmail",CID));

    /**
     * Gets the <code>BEmail</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBEmailAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bEmailCID);
    }


    /**
     * Gets the <code>BEmail</code> attribute value.
     * @return the value
     *
     * @see #setBEmail
     * @see #removeBEmail
     */
    public final String getBEmail() {
        return getString(getBEmailAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BEmail</code> attribute value.
     * @param val the new value
     *
     * @see #getBEmail
     * @see #removeBEmail
     */
    public final void setBEmail(String val) {
        setString(getBEmailAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BEmail</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBEmail
     * @see #setBEmail
     */
    public final void removeBEmail() {
        removeValue(getBEmailAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBEmail
     * @see #setBEmail
     */
    public final boolean isBEmailDefaultValue() {
        return isDefaultValue(getBEmailAttribute(getMtDatabase()));
    }


    /* Attribute 'BApproved' */

    /** Attribute <code>BApproved</code> cache ID */
    private static int bApprovedCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BApproved",CID));

    /**
     * Gets the <code>BApproved</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBApprovedAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bApprovedCID);
    }


    /**
     * Gets the <code>BApproved</code> attribute value.
     * @return the value
     *
     * @see #setBApproved
     * @see #removeBApproved
     */
    public final boolean getBApproved() {
        return getBoolean(getBApprovedAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BApproved</code> attribute value.
     * @param val the new value
     *
     * @see #getBApproved
     * @see #removeBApproved
     */
    public final void setBApproved(boolean val) {
        setBoolean(getBApprovedAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BApproved</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBApproved
     * @see #setBApproved
     */
    public final void removeBApproved() {
        removeValue(getBApprovedAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBApproved
     * @see #setBApproved
     */
    public final boolean isBApprovedDefaultValue() {
        return isDefaultValue(getBApprovedAttribute(getMtDatabase()));
    }


    /* Attribute 'BBankAccountNo' */

    /** Attribute <code>BBankAccountNo</code> cache ID */
    private static int bBankAccountNoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BBankAccountNo",CID));

    /**
     * Gets the <code>BBankAccountNo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBBankAccountNoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bBankAccountNoCID);
    }


    /**
     * Gets the <code>BBankAccountNo</code> attribute value.
     * @return the value
     *
     * @see #setBBankAccountNo
     * @see #removeBBankAccountNo
     */
    public final String getBBankAccountNo() {
        return getString(getBBankAccountNoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BBankAccountNo</code> attribute value.
     * @param val the new value
     *
     * @see #getBBankAccountNo
     * @see #removeBBankAccountNo
     */
    public final void setBBankAccountNo(String val) {
        setString(getBBankAccountNoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BBankAccountNo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBBankAccountNo
     * @see #setBBankAccountNo
     */
    public final void removeBBankAccountNo() {
        removeValue(getBBankAccountNoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBBankAccountNo
     * @see #setBBankAccountNo
     */
    public final boolean isBBankAccountNoDefaultValue() {
        return isDefaultValue(getBBankAccountNoAttribute(getMtDatabase()));
    }


    /* Attribute 'BBankSortCode' */

    /** Attribute <code>BBankSortCode</code> cache ID */
    private static int bBankSortCodeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("BBankSortCode",CID));

    /**
     * Gets the <code>BBankSortCode</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getBBankSortCodeAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(bBankSortCodeCID);
    }


    /**
     * Gets the <code>BBankSortCode</code> attribute value.
     * @return the value
     *
     * @see #setBBankSortCode
     * @see #removeBBankSortCode
     */
    public final String getBBankSortCode() {
        return getString(getBBankSortCodeAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>BBankSortCode</code> attribute value.
     * @param val the new value
     *
     * @see #getBBankSortCode
     * @see #removeBBankSortCode
     */
    public final void setBBankSortCode(String val) {
        setString(getBBankSortCodeAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>BBankSortCode</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getBBankSortCode
     * @see #setBBankSortCode
     */
    public final void removeBBankSortCode() {
        removeValue(getBBankSortCodeAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getBBankSortCode
     * @see #setBBankSortCode
     */
    public final boolean isBBankSortCodeDefaultValue() {
        return isDefaultValue(getBBankSortCodeAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'bidding' */

    /** Relationship <code>bidding</code> cache ID */
    private static int biddingCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("bidding",CID));

    /**
     * Gets the <code>bidding</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getBiddingRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(biddingCID);
    }

    /**
     * Gets the <code>bidding</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getBiddingSize
     * @see #biddingIterator
     * @see #setBidding
     * @see #removeBidding
     */
    public final ComissionBidsDetails[] getBidding() {
        return (ComissionBidsDetails[])getSuccessors(getBiddingRelationship(getMtDatabase()), ComissionBidsDetails.class);
    }

    /**
     * Counts the <code>bidding</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getBidding
     * @see #biddingIterator
     * @see #setBidding
     * @see #removeBidding
     */
    public final int getBiddingSize() {
        return getSuccessorSize(getBiddingRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>bidding</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getBidding
     * @see #getBiddingSize
     * @see #setBidding
     * @see #removeBidding
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> biddingIterator() {
        return this.<E>successorIterator(getBiddingRelationship(getMtDatabase()), ComissionBidsDetails.class);
    }

    /**
     * Sets the <code>bidding</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getBidding
     * @see #getBiddingSize
     * @see #biddingIterator
     * @see #removeBidding
     */
    public final void setBidding(ComissionBidsDetails[] succs) {
        setSuccessors(getBiddingRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>bidding</code> successors list.
     * @param succ the object to add
     *
     * @see #getBidding
     * @see #getBiddingSize
     * @see #biddingIterator
     * @see #setBidding
     * @see #removeBidding
     */
    public final void prependBidding(ComissionBidsDetails succ) {
        prependSuccessor(getBiddingRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>bidding</code> successors list.
     * @param succ the object to add
     *
     * @see #getBidding
     * @see #setBidding
     * @see #removeBidding
     * @see #getBiddingSize
     * @see #biddingIterator
     */
    public final void appendBidding(ComissionBidsDetails succ) {
        appendSuccessor(getBiddingRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>bidding</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getBidding
     * @see #setBidding
     * @see #removeBidding
     * @see #getBiddingSize
     * @see #biddingIterator
     */
    public final void appendBidding(ComissionBidsDetails[] succs) {
        addSuccessors(getBiddingRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>bidding</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getBidding
     * @see #setBidding
     * @see #getBiddingSize
     * @see #biddingIterator
     */
    public void removeBidding(ComissionBidsDetails[] succs) {
        removeSuccessors(getBiddingRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>bidding</code> successors list.
     * @param succ the object to remove
     *
     * @see #getBidding
     * @see #setBidding
     * @see #getBiddingSize
     * @see #biddingIterator
     */
    public void removeBidding(ComissionBidsDetails succ) {
        removeSuccessor(getBiddingRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>bidding</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearBidding() {
        clearSuccessors(getBiddingRelationship(getMtDatabase()));
    }


    /* Relationship 'buy' */

    /** Relationship <code>buy</code> cache ID */
    private static int buyCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("buy",CID));

    /**
     * Gets the <code>buy</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getBuyRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(buyCID);
    }

    /**
     * Gets the <code>buy</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getBuySize
     * @see #buyIterator
     * @see #setBuy
     * @see #removeBuy
     */
    public final ArtItem[] getBuy() {
        return (ArtItem[])getSuccessors(getBuyRelationship(getMtDatabase()), ArtItem.class);
    }

    /**
     * Counts the <code>buy</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getBuy
     * @see #buyIterator
     * @see #setBuy
     * @see #removeBuy
     */
    public final int getBuySize() {
        return getSuccessorSize(getBuyRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>buy</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getBuy
     * @see #getBuySize
     * @see #setBuy
     * @see #removeBuy
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> buyIterator() {
        return this.<E>successorIterator(getBuyRelationship(getMtDatabase()), ArtItem.class);
    }

    /**
     * Sets the <code>buy</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getBuy
     * @see #getBuySize
     * @see #buyIterator
     * @see #removeBuy
     */
    public final void setBuy(ArtItem[] succs) {
        setSuccessors(getBuyRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>buy</code> successors list.
     * @param succ the object to add
     *
     * @see #getBuy
     * @see #getBuySize
     * @see #buyIterator
     * @see #setBuy
     * @see #removeBuy
     */
    public final void prependBuy(ArtItem succ) {
        prependSuccessor(getBuyRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>buy</code> successors list.
     * @param succ the object to add
     *
     * @see #getBuy
     * @see #setBuy
     * @see #removeBuy
     * @see #getBuySize
     * @see #buyIterator
     */
    public final void appendBuy(ArtItem succ) {
        appendSuccessor(getBuyRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>buy</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getBuy
     * @see #setBuy
     * @see #removeBuy
     * @see #getBuySize
     * @see #buyIterator
     */
    public final void appendBuy(ArtItem[] succs) {
        addSuccessors(getBuyRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>buy</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getBuy
     * @see #setBuy
     * @see #getBuySize
     * @see #buyIterator
     */
    public void removeBuy(ArtItem[] succs) {
        removeSuccessors(getBuyRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>buy</code> successors list.
     * @param succ the object to remove
     *
     * @see #getBuy
     * @see #setBuy
     * @see #getBuySize
     * @see #buyIterator
     */
    public void removeBuy(ArtItem succ) {
        removeSuccessor(getBuyRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>buy</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearBuy() {
        clearSuccessors(getBuyRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public BuyerClient(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[BuyerClient]";
    }
}
