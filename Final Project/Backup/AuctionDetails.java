/*
 * AuctionDetails.java
 *
 * Generated with Matisse Schema Definition Language 9.1.8
 * Generation date: Thu Apr 07 21:16:53 2016
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>AuctionDetails</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class AuctionDetails extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.8
     * Generation Date: Thu Apr 07 21:16:53 2016
     */

    /*
     * Class variables and methods
     */

    /** Class <code>AuctionDetails</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("AuctionDetails"));

    /**
     * Gets the <code>AuctionDetails</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public AuctionDetails(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected AuctionDetails(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(AuctionDetails.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, AuctionDetails.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(AuctionDetails.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, AuctionDetails.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'AuctionName' */

    /** Attribute <code>AuctionName</code> cache ID */
    private static int auctionNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AuctionName",CID));

    /**
     * Gets the <code>AuctionName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctionNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctionNameCID);
    }


    /**
     * Gets the <code>AuctionName</code> attribute value.
     * @return the value
     *
     * @see #setAuctionName
     * @see #removeAuctionName
     */
    public final String getAuctionName() {
        return getString(getAuctionNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AuctionName</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctionName
     * @see #removeAuctionName
     */
    public final void setAuctionName(String val) {
        setString(getAuctionNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AuctionName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctionName
     * @see #setAuctionName
     */
    public final void removeAuctionName() {
        removeValue(getAuctionNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctionName
     * @see #setAuctionName
     */
    public final boolean isAuctionNameDefaultValue() {
        return isDefaultValue(getAuctionNameAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findAuctionTitle' of attribute 'AuctionName' */

    /** EntryPointDictionary <code>findAuctionTitle</code> cache ID */
    private static int findAuctionTitleDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findAuctionTitle"));

    /**
     * Gets the <code>findAuctionTitle</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindAuctionTitleDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findAuctionTitleDictionaryCID);
    }

    /**
     * Finds the <code>AuctionDetails</code> object where <code>AuctionName</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>AuctionDetails</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static AuctionDetails lookupFindAuctionTitle(com.matisse.MtDatabase db, String value) {
        return (AuctionDetails)getFindAuctionTitleDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>AuctionDetails</code> objects where <code>AuctionName</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findAuctionTitleIterator(com.matisse.MtDatabase db, String value) {
        return getFindAuctionTitleDictionary(db).<E>iterator(value, getClass(db), AuctionDetails.class);
    }

    /**
     * Creates an iterator on all <code>AuctionDetails</code> objects where <code>AuctionName</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findAuctionTitleIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindAuctionTitleDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, AuctionDetails.class);
    }


    /* Attribute 'AuctionDate' */

    /** Attribute <code>AuctionDate</code> cache ID */
    private static int auctionDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AuctionDate",CID));

    /**
     * Gets the <code>AuctionDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctionDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctionDateCID);
    }


    /**
     * Gets the <code>AuctionDate</code> attribute value.
     * @return the value
     *
     * @see #setAuctionDate
     * @see #removeAuctionDate
     */
    public final String getAuctionDate() {
        return getString(getAuctionDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AuctionDate</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctionDate
     * @see #removeAuctionDate
     */
    public final void setAuctionDate(String val) {
        setString(getAuctionDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AuctionDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctionDate
     * @see #setAuctionDate
     */
    public final void removeAuctionDate() {
        removeValue(getAuctionDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctionDate
     * @see #setAuctionDate
     */
    public final boolean isAuctionDateDefaultValue() {
        return isDefaultValue(getAuctionDateAttribute(getMtDatabase()));
    }


    /* Attribute 'AuctionTheme' */

    /** Attribute <code>AuctionTheme</code> cache ID */
    private static int auctionThemeCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AuctionTheme",CID));

    /**
     * Gets the <code>AuctionTheme</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctionThemeAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctionThemeCID);
    }


    /**
     * Gets the <code>AuctionTheme</code> attribute value.
     * @return the value
     *
     * @see #setAuctionTheme
     * @see #removeAuctionTheme
     */
    public final String getAuctionTheme() {
        return getString(getAuctionThemeAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AuctionTheme</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctionTheme
     * @see #removeAuctionTheme
     */
    public final void setAuctionTheme(String val) {
        setString(getAuctionThemeAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AuctionTheme</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctionTheme
     * @see #setAuctionTheme
     */
    public final void removeAuctionTheme() {
        removeValue(getAuctionThemeAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctionTheme
     * @see #setAuctionTheme
     */
    public final boolean isAuctionThemeDefaultValue() {
        return isDefaultValue(getAuctionThemeAttribute(getMtDatabase()));
    }


    /* Attribute 'AuctionLocation' */

    /** Attribute <code>AuctionLocation</code> cache ID */
    private static int auctionLocationCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AuctionLocation",CID));

    /**
     * Gets the <code>AuctionLocation</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctionLocationAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctionLocationCID);
    }


    /**
     * Gets the <code>AuctionLocation</code> attribute value.
     * @return the value
     *
     * @see #setAuctionLocation
     * @see #removeAuctionLocation
     */
    public final String getAuctionLocation() {
        return getString(getAuctionLocationAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AuctionLocation</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctionLocation
     * @see #removeAuctionLocation
     */
    public final void setAuctionLocation(String val) {
        setString(getAuctionLocationAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AuctionLocation</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctionLocation
     * @see #setAuctionLocation
     */
    public final void removeAuctionLocation() {
        removeValue(getAuctionLocationAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctionLocation
     * @see #setAuctionLocation
     */
    public final boolean isAuctionLocationDefaultValue() {
        return isDefaultValue(getAuctionLocationAttribute(getMtDatabase()));
    }


    /* Attribute 'AuctionPeriod' */

    /** Attribute <code>AuctionPeriod</code> cache ID */
    private static int auctionPeriodCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AuctionPeriod",CID));

    /**
     * Gets the <code>AuctionPeriod</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctionPeriodAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctionPeriodCID);
    }


    /**
     * Gets the <code>AuctionPeriod</code> attribute value.
     * @return the value
     *
     * @see #setAuctionPeriod
     * @see #removeAuctionPeriod
     */
    public final String getAuctionPeriod() {
        return getString(getAuctionPeriodAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AuctionPeriod</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctionPeriod
     * @see #removeAuctionPeriod
     */
    public final void setAuctionPeriod(String val) {
        setString(getAuctionPeriodAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AuctionPeriod</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctionPeriod
     * @see #setAuctionPeriod
     */
    public final void removeAuctionPeriod() {
        removeValue(getAuctionPeriodAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctionPeriod
     * @see #setAuctionPeriod
     */
    public final boolean isAuctionPeriodDefaultValue() {
        return isDefaultValue(getAuctionPeriodAttribute(getMtDatabase()));
    }


    /* Attribute 'AuctionLotNumber' */

    /** Attribute <code>AuctionLotNumber</code> cache ID */
    private static int auctionLotNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AuctionLotNumber",CID));

    /**
     * Gets the <code>AuctionLotNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAuctionLotNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(auctionLotNumberCID);
    }


    /**
     * Gets the <code>AuctionLotNumber</code> attribute value.
     * @return the value
     *
     * @see #setAuctionLotNumber
     * @see #removeAuctionLotNumber
     */
    public final int getAuctionLotNumber() {
        return getInteger(getAuctionLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AuctionLotNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getAuctionLotNumber
     * @see #removeAuctionLotNumber
     */
    public final void setAuctionLotNumber(int val) {
        setInteger(getAuctionLotNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AuctionLotNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAuctionLotNumber
     * @see #setAuctionLotNumber
     */
    public final void removeAuctionLotNumber() {
        removeValue(getAuctionLotNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAuctionLotNumber
     * @see #setAuctionLotNumber
     */
    public final boolean isAuctionLotNumberDefaultValue() {
        return isDefaultValue(getAuctionLotNumberAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findAuction' of attribute 'AuctionLotNumber' */

    /** EntryPointDictionary <code>findAuction</code> cache ID */
    private static int findAuctionDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findAuction"));

    /**
     * Gets the <code>findAuction</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindAuctionDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findAuctionDictionaryCID);
    }

    /**
     * Finds the <code>AuctionDetails</code> object where <code>AuctionLotNumber</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>AuctionDetails</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static AuctionDetails lookupFindAuction(com.matisse.MtDatabase db, String value) {
        return (AuctionDetails)getFindAuctionDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>AuctionDetails</code> objects where <code>AuctionLotNumber</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findAuctionIterator(com.matisse.MtDatabase db, String value) {
        return getFindAuctionDictionary(db).<E>iterator(value, getClass(db), AuctionDetails.class);
    }

    /**
     * Creates an iterator on all <code>AuctionDetails</code> objects where <code>AuctionLotNumber</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findAuctionIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindAuctionDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, AuctionDetails.class);
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'auction_item' */

    /** Relationship <code>auction_item</code> cache ID */
    private static int auction_itemCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("auction_item",CID));

    /**
     * Gets the <code>auction_item</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getAuction_itemRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(auction_itemCID);
    }

    /**
     * Gets the <code>auction_item</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getAuction_itemSize
     * @see #auction_itemIterator
     */
    public final ArtItem[] getAuction_item() {
        return (ArtItem[])getSuccessors(getAuction_itemRelationship(getMtDatabase()), ArtItem.class);
    }

    /**
     * Counts the <code>auction_item</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getAuction_item
     * @see #auction_itemIterator
     */
    public final int getAuction_itemSize() {
        return getSuccessorSize(getAuction_itemRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>auction_item</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getAuction_item
     * @see #getAuction_itemSize
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> auction_itemIterator() {
        return this.<E>successorIterator(getAuction_itemRelationship(getMtDatabase()), ArtItem.class);
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public AuctionDetails(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[AuctionDetails]";
    }
}
