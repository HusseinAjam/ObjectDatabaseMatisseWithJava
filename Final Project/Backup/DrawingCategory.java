/*
 * DrawingCategory.java
 *
 * Generated with Matisse Schema Definition Language 9.1.8
 * Generation date: Thu Apr 07 21:16:53 2016
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>DrawingCategory</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class DrawingCategory extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.8
     * Generation Date: Thu Apr 07 21:16:53 2016
     */

    /*
     * Class variables and methods
     */

    /** Class <code>DrawingCategory</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("DrawingCategory"));

    /**
     * Gets the <code>DrawingCategory</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public DrawingCategory(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected DrawingCategory(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(DrawingCategory.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, DrawingCategory.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(DrawingCategory.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, DrawingCategory.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'DrawingMedium' */

    /** Attribute <code>DrawingMedium</code> cache ID */
    private static int drawingMediumCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DrawingMedium",CID));

    /**
     * Gets the <code>DrawingMedium</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDrawingMediumAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(drawingMediumCID);
    }


    /**
     * Gets the <code>DrawingMedium</code> attribute value.
     * @return the value
     *
     * @see #setDrawingMedium
     * @see #removeDrawingMedium
     */
    public final String getDrawingMedium() {
        return getString(getDrawingMediumAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DrawingMedium</code> attribute value.
     * @param val the new value
     *
     * @see #getDrawingMedium
     * @see #removeDrawingMedium
     */
    public final void setDrawingMedium(String val) {
        setString(getDrawingMediumAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DrawingMedium</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDrawingMedium
     * @see #setDrawingMedium
     */
    public final void removeDrawingMedium() {
        removeValue(getDrawingMediumAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDrawingMedium
     * @see #setDrawingMedium
     */
    public final boolean isDrawingMediumDefaultValue() {
        return isDefaultValue(getDrawingMediumAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findDrawingCategory' of attribute 'DrawingMedium' */

    /** EntryPointDictionary <code>findDrawingCategory</code> cache ID */
    private static int findDrawingCategoryDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findDrawingCategory"));

    /**
     * Gets the <code>findDrawingCategory</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindDrawingCategoryDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findDrawingCategoryDictionaryCID);
    }

    /**
     * Finds the <code>DrawingCategory</code> object where <code>DrawingMedium</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>DrawingCategory</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static DrawingCategory lookupFindDrawingCategory(com.matisse.MtDatabase db, String value) {
        return (DrawingCategory)getFindDrawingCategoryDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>DrawingCategory</code> objects where <code>DrawingMedium</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findDrawingCategoryIterator(com.matisse.MtDatabase db, String value) {
        return getFindDrawingCategoryDictionary(db).<E>iterator(value, getClass(db), DrawingCategory.class);
    }

    /**
     * Creates an iterator on all <code>DrawingCategory</code> objects where <code>DrawingMedium</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findDrawingCategoryIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindDrawingCategoryDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, DrawingCategory.class);
    }


    /* Attribute 'DrawingFrame' */

    /** Attribute <code>DrawingFrame</code> cache ID */
    private static int drawingFrameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DrawingFrame",CID));

    /**
     * Gets the <code>DrawingFrame</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDrawingFrameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(drawingFrameCID);
    }


    /**
     * Gets the <code>DrawingFrame</code> attribute value.
     * @return the value
     *
     * @see #setDrawingFrame
     * @see #removeDrawingFrame
     */
    public final String getDrawingFrame() {
        return getString(getDrawingFrameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DrawingFrame</code> attribute value.
     * @param val the new value
     *
     * @see #getDrawingFrame
     * @see #removeDrawingFrame
     */
    public final void setDrawingFrame(String val) {
        setString(getDrawingFrameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DrawingFrame</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDrawingFrame
     * @see #setDrawingFrame
     */
    public final void removeDrawingFrame() {
        removeValue(getDrawingFrameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDrawingFrame
     * @see #setDrawingFrame
     */
    public final boolean isDrawingFrameDefaultValue() {
        return isDefaultValue(getDrawingFrameAttribute(getMtDatabase()));
    }


    /* Attribute 'DrawingDimension' */

    /** Attribute <code>DrawingDimension</code> cache ID */
    private static int drawingDimensionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DrawingDimension",CID));

    /**
     * Gets the <code>DrawingDimension</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDrawingDimensionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(drawingDimensionCID);
    }


    /**
     * Gets the <code>DrawingDimension</code> attribute value.
     * @return the value
     *
     * @see #setDrawingDimension
     * @see #removeDrawingDimension
     */
    public final String getDrawingDimension() {
        return getString(getDrawingDimensionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DrawingDimension</code> attribute value.
     * @param val the new value
     *
     * @see #getDrawingDimension
     * @see #removeDrawingDimension
     */
    public final void setDrawingDimension(String val) {
        setString(getDrawingDimensionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DrawingDimension</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDrawingDimension
     * @see #setDrawingDimension
     */
    public final void removeDrawingDimension() {
        removeValue(getDrawingDimensionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDrawingDimension
     * @see #setDrawingDimension
     */
    public final boolean isDrawingDimensionDefaultValue() {
        return isDefaultValue(getDrawingDimensionAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'from_drawing' */

    /** Relationship <code>from_drawing</code> cache ID */
    private static int from_drawingCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("from_drawing",CID));

    /**
     * Gets the <code>from_drawing</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getFrom_drawingRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(from_drawingCID);
    }

    /**
     * Gets the <code>from_drawing</code> sucessor object.
     * @return an object 
     */
    public final ArtItem getFrom_drawing() {
        return (ArtItem)getSuccessor(getFrom_drawingRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public DrawingCategory(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[DrawingCategory]";
    }
}
