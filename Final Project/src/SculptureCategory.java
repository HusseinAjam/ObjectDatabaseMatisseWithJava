/*
 * SculptureCategory.java
 *
 * Generated with Matisse Schema Definition Language 9.1.8
 * Generation date: Thu Apr 07 21:16:53 2016
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>SculptureCategory</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class SculptureCategory extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.8
     * Generation Date: Thu Apr 07 21:16:53 2016
     */

    /*
     * Class variables and methods
     */

    /** Class <code>SculptureCategory</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("SculptureCategory"));

    /**
     * Gets the <code>SculptureCategory</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public SculptureCategory(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected SculptureCategory(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(SculptureCategory.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, SculptureCategory.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(SculptureCategory.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, SculptureCategory.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'SculptureMaterial' */

    /** Attribute <code>SculptureMaterial</code> cache ID */
    private static int sculptureMaterialCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SculptureMaterial",CID));

    /**
     * Gets the <code>SculptureMaterial</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSculptureMaterialAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sculptureMaterialCID);
    }


    /**
     * Gets the <code>SculptureMaterial</code> attribute value.
     * @return the value
     *
     * @see #setSculptureMaterial
     * @see #removeSculptureMaterial
     */
    public final String getSculptureMaterial() {
        return getString(getSculptureMaterialAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SculptureMaterial</code> attribute value.
     * @param val the new value
     *
     * @see #getSculptureMaterial
     * @see #removeSculptureMaterial
     */
    public final void setSculptureMaterial(String val) {
        setString(getSculptureMaterialAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SculptureMaterial</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSculptureMaterial
     * @see #setSculptureMaterial
     */
    public final void removeSculptureMaterial() {
        removeValue(getSculptureMaterialAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSculptureMaterial
     * @see #setSculptureMaterial
     */
    public final boolean isSculptureMaterialDefaultValue() {
        return isDefaultValue(getSculptureMaterialAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findSculptureCategory' of attribute 'SculptureMaterial' */

    /** EntryPointDictionary <code>findSculptureCategory</code> cache ID */
    private static int findSculptureCategoryDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findSculptureCategory"));

    /**
     * Gets the <code>findSculptureCategory</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindSculptureCategoryDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findSculptureCategoryDictionaryCID);
    }

    /**
     * Finds the <code>SculptureCategory</code> object where <code>SculptureMaterial</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>SculptureCategory</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static SculptureCategory lookupFindSculptureCategory(com.matisse.MtDatabase db, String value) {
        return (SculptureCategory)getFindSculptureCategoryDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>SculptureCategory</code> objects where <code>SculptureMaterial</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findSculptureCategoryIterator(com.matisse.MtDatabase db, String value) {
        return getFindSculptureCategoryDictionary(db).<E>iterator(value, getClass(db), SculptureCategory.class);
    }

    /**
     * Creates an iterator on all <code>SculptureCategory</code> objects where <code>SculptureMaterial</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findSculptureCategoryIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindSculptureCategoryDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, SculptureCategory.class);
    }


    /* Attribute 'SculptureDimension' */

    /** Attribute <code>SculptureDimension</code> cache ID */
    private static int sculptureDimensionCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SculptureDimension",CID));

    /**
     * Gets the <code>SculptureDimension</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSculptureDimensionAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sculptureDimensionCID);
    }


    /**
     * Gets the <code>SculptureDimension</code> attribute value.
     * @return the value
     *
     * @see #setSculptureDimension
     * @see #removeSculptureDimension
     */
    public final String getSculptureDimension() {
        return getString(getSculptureDimensionAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SculptureDimension</code> attribute value.
     * @param val the new value
     *
     * @see #getSculptureDimension
     * @see #removeSculptureDimension
     */
    public final void setSculptureDimension(String val) {
        setString(getSculptureDimensionAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SculptureDimension</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSculptureDimension
     * @see #setSculptureDimension
     */
    public final void removeSculptureDimension() {
        removeValue(getSculptureDimensionAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSculptureDimension
     * @see #setSculptureDimension
     */
    public final boolean isSculptureDimensionDefaultValue() {
        return isDefaultValue(getSculptureDimensionAttribute(getMtDatabase()));
    }


    /* Attribute 'SculptureWeight' */

    /** Attribute <code>SculptureWeight</code> cache ID */
    private static int sculptureWeightCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("SculptureWeight",CID));

    /**
     * Gets the <code>SculptureWeight</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSculptureWeightAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(sculptureWeightCID);
    }


    /**
     * Gets the <code>SculptureWeight</code> attribute value.
     * @return the value
     *
     * @see #setSculptureWeight
     * @see #removeSculptureWeight
     */
    public final double getSculptureWeight() {
        return getDouble(getSculptureWeightAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>SculptureWeight</code> attribute value.
     * @param val the new value
     *
     * @see #getSculptureWeight
     * @see #removeSculptureWeight
     */
    public final void setSculptureWeight(double val) {
        setDouble(getSculptureWeightAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>SculptureWeight</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSculptureWeight
     * @see #setSculptureWeight
     */
    public final void removeSculptureWeight() {
        removeValue(getSculptureWeightAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSculptureWeight
     * @see #setSculptureWeight
     */
    public final boolean isSculptureWeightDefaultValue() {
        return isDefaultValue(getSculptureWeightAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'from_sculpure' */

    /** Relationship <code>from_sculpure</code> cache ID */
    private static int from_sculpureCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("from_sculpure",CID));

    /**
     * Gets the <code>from_sculpure</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getFrom_sculpureRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(from_sculpureCID);
    }

    /**
     * Gets the <code>from_sculpure</code> sucessor object.
     * @return an object 
     */
    public final ArtItem getFrom_sculpure() {
        return (ArtItem)getSuccessor(getFrom_sculpureRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public SculptureCategory(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[SculptureCategory]";
    }
}
