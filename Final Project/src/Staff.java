/*
 * Staff.java
 *
 * Generated with Matisse Schema Definition Language 9.1.8
 * Generation date: Sat Apr 09 04:55:28 2016
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>Staff</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Staff extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.8
     * Generation Date: Sat Apr 09 04:55:28 2016
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Staff</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("Staff"));

    /**
     * Gets the <code>Staff</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Staff(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Staff(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Staff.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Staff.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Staff.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Staff.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'staffId' */

    /** Attribute <code>staffId</code> cache ID */
    private static int staffIdCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("staffId",CID));

    /**
     * Gets the <code>staffId</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getStaffIdAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(staffIdCID);
    }


    /**
     * Gets the <code>staffId</code> attribute value.
     * @return the value
     *
     * @see #setStaffId
     * @see #removeStaffId
     */
    public final int getStaffId() {
        return getInteger(getStaffIdAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>staffId</code> attribute value.
     * @param val the new value
     *
     * @see #getStaffId
     * @see #removeStaffId
     */
    public final void setStaffId(int val) {
        setInteger(getStaffIdAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>staffId</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getStaffId
     * @see #setStaffId
     */
    public final void removeStaffId() {
        removeValue(getStaffIdAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getStaffId
     * @see #setStaffId
     */
    public final boolean isStaffIdDefaultValue() {
        return isDefaultValue(getStaffIdAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findStaff' of attribute 'staffId' */

    /** EntryPointDictionary <code>findStaff</code> cache ID */
    private static int findStaffDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findStaff"));

    /**
     * Gets the <code>findStaff</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindStaffDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findStaffDictionaryCID);
    }

    /**
     * Finds the <code>Staff</code> object where <code>staffId</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>Staff</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static Staff lookupFindStaff(com.matisse.MtDatabase db, String value) {
        return (Staff)getFindStaffDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>Staff</code> objects where <code>staffId</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findStaffIterator(com.matisse.MtDatabase db, String value) {
        return getFindStaffDictionary(db).<E>iterator(value, getClass(db), Staff.class);
    }

    /**
     * Creates an iterator on all <code>Staff</code> objects where <code>staffId</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findStaffIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindStaffDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, Staff.class);
    }


    /* Attribute 'staffName' */

    /** Attribute <code>staffName</code> cache ID */
    private static int staffNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("staffName",CID));

    /**
     * Gets the <code>staffName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getStaffNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(staffNameCID);
    }


    /**
     * Gets the <code>staffName</code> attribute value.
     * @return the value
     *
     * @see #setStaffName
     * @see #removeStaffName
     */
    public final String getStaffName() {
        return getString(getStaffNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>staffName</code> attribute value.
     * @param val the new value
     *
     * @see #getStaffName
     * @see #removeStaffName
     */
    public final void setStaffName(String val) {
        setString(getStaffNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>staffName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getStaffName
     * @see #setStaffName
     */
    public final void removeStaffName() {
        removeValue(getStaffNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getStaffName
     * @see #setStaffName
     */
    public final boolean isStaffNameDefaultValue() {
        return isDefaultValue(getStaffNameAttribute(getMtDatabase()));
    }


    /* Attribute 'staffLevel' */

    /** Attribute <code>staffLevel</code> cache ID */
    private static int staffLevelCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("staffLevel",CID));

    /**
     * Gets the <code>staffLevel</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getStaffLevelAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(staffLevelCID);
    }


    /**
     * Gets the <code>staffLevel</code> attribute value.
     * @return the value
     *
     * @see #setStaffLevel
     * @see #removeStaffLevel
     */
    public final int getStaffLevel() {
        return getInteger(getStaffLevelAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>staffLevel</code> attribute value.
     * @param val the new value
     *
     * @see #getStaffLevel
     * @see #removeStaffLevel
     */
    public final void setStaffLevel(int val) {
        setInteger(getStaffLevelAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>staffLevel</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getStaffLevel
     * @see #setStaffLevel
     */
    public final void removeStaffLevel() {
        removeValue(getStaffLevelAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getStaffLevel
     * @see #setStaffLevel
     */
    public final boolean isStaffLevelDefaultValue() {
        return isDefaultValue(getStaffLevelAttribute(getMtDatabase()));
    }


    /* Attribute 'password' */

    /** Attribute <code>password</code> cache ID */
    private static int passwordCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("password",CID));

    /**
     * Gets the <code>password</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPasswordAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(passwordCID);
    }


    /**
     * Gets the <code>password</code> attribute value.
     * @return the value
     *
     * @see #setPassword
     * @see #removePassword
     */
    public final String getPassword() {
        return getString(getPasswordAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>password</code> attribute value.
     * @param val the new value
     *
     * @see #getPassword
     * @see #removePassword
     */
    public final void setPassword(String val) {
        setString(getPasswordAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>password</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPassword
     * @see #setPassword
     */
    public final void removePassword() {
        removeValue(getPasswordAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPassword
     * @see #setPassword
     */
    public final boolean isPasswordDefaultValue() {
        return isDefaultValue(getPasswordAttribute(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Staff(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Staff]";
    }
}
