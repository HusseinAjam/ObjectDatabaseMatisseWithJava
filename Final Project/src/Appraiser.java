/*
 * Appraiser.java
 *
 * Generated with Matisse Schema Definition Language 9.1.8
 * Generation date: Thu Apr 07 21:16:54 2016
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

import com.matisse.reflect.*;

/**
 * <code>Appraiser</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Appraiser extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.8
     * Generation Date: Thu Apr 07 21:16:54 2016
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Appraiser</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("Appraiser"));

    /**
     * Gets the <code>Appraiser</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Appraiser(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Appraiser(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Appraiser.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Appraiser.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Appraiser.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Appraiser.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'AppraiserName' */

    /** Attribute <code>AppraiserName</code> cache ID */
    private static int appraiserNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AppraiserName",CID));

    /**
     * Gets the <code>AppraiserName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAppraiserNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(appraiserNameCID);
    }


    /**
     * Gets the <code>AppraiserName</code> attribute value.
     * @return the value
     *
     * @see #setAppraiserName
     * @see #removeAppraiserName
     */
    public final String getAppraiserName() {
        return getString(getAppraiserNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AppraiserName</code> attribute value.
     * @param val the new value
     *
     * @see #getAppraiserName
     * @see #removeAppraiserName
     */
    public final void setAppraiserName(String val) {
        setString(getAppraiserNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AppraiserName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAppraiserName
     * @see #setAppraiserName
     */
    public final void removeAppraiserName() {
        removeValue(getAppraiserNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAppraiserName
     * @see #setAppraiserName
     */
    public final boolean isAppraiserNameDefaultValue() {
        return isDefaultValue(getAppraiserNameAttribute(getMtDatabase()));
    }

    /* EntryPoint 'findAppraiser' of attribute 'AppraiserName' */

    /** EntryPointDictionary <code>findAppraiser</code> cache ID */
    private static int findAppraiserDictionaryCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtEntryPointDictionary.Loader("findAppraiser"));

    /**
     * Gets the <code>findAppraiser</code> entry point dictionary descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the dictionary
     * @return the entry point dictionary descriptor object
     */
    public static com.matisse.reflect.MtEntryPointDictionary getFindAppraiserDictionary(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtEntryPointDictionary)db.getCachedObject(findAppraiserDictionaryCID);
    }

    /**
     * Finds the <code>Appraiser</code> object where <code>AppraiserName</code> matches this value.
     * @param db a database
     * @param value the search string
     * @return the matching <code>Appraiser</code> or <code>null</code> if none was found
     * @throws MtException if more than one match found
     */
    public static Appraiser lookupFindAppraiser(com.matisse.MtDatabase db, String value) {
        return (Appraiser)getFindAppraiserDictionary(db).lookup(value, getClass(db));
    }

    /**
     * Creates an iterator on all <code>Appraiser</code> objects where <code>AppraiserName</code> matches this value.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findAppraiserIterator(com.matisse.MtDatabase db, String value) {
        return getFindAppraiserDictionary(db).<E>iterator(value, getClass(db), Appraiser.class);
    }

    /**
     * Creates an iterator on all <code>Appraiser</code> objects where <code>AppraiserName</code> matches this value.
     * Use this method to restrict the iterator to members of a subclass of this class,
     * or to set a maximum number of objects.
     * @param <E> a MtObject class     * @param db a database
     * @param value the search string
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param numObjPerBuffer maximum number of objects to include in the iterator
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> findAppraiserIterator(com.matisse.MtDatabase db, String value, com.matisse.reflect.MtClass filterClass, int numObjPerBuffer) {
        return getFindAppraiserDictionary(db).<E>iterator(value, filterClass, numObjPerBuffer, Appraiser.class);
    }


    /* Attribute 'Specialism' */

    /** Attribute <code>Specialism</code> cache ID */
    private static int specialismCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Specialism",CID));

    /**
     * Gets the <code>Specialism</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSpecialismAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(specialismCID);
    }


    /**
     * Gets the <code>Specialism</code> attribute value.
     * @return the value
     *
     * @see #setSpecialism
     * @see #removeSpecialism
     */
    public final String getSpecialism() {
        return getString(getSpecialismAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Specialism</code> attribute value.
     * @param val the new value
     *
     * @see #getSpecialism
     * @see #removeSpecialism
     */
    public final void setSpecialism(String val) {
        setString(getSpecialismAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Specialism</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSpecialism
     * @see #setSpecialism
     */
    public final void removeSpecialism() {
        removeValue(getSpecialismAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSpecialism
     * @see #setSpecialism
     */
    public final boolean isSpecialismDefaultValue() {
        return isDefaultValue(getSpecialismAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'checked_item' */

    /** Relationship <code>checked_item</code> cache ID */
    private static int checked_itemCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("checked_item",CID));

    /**
     * Gets the <code>checked_item</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getChecked_itemRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(checked_itemCID);
    }

    /**
     * Gets the <code>checked_item</code> relationship's successors.
     * @return an array of objects
     *
     * @see #getChecked_itemSize
     * @see #checked_itemIterator
     * @see #setChecked_item
     * @see #removeChecked_item
     */
    public final ArtItem[] getChecked_item() {
        return (ArtItem[])getSuccessors(getChecked_itemRelationship(getMtDatabase()), ArtItem.class);
    }

    /**
     * Counts the <code>checked_item</code> relationship's successors.
     * @return the number of successors
     *
     * @see #getChecked_item
     * @see #checked_itemIterator
     * @see #setChecked_item
     * @see #removeChecked_item
     */
    public final int getChecked_itemSize() {
        return getSuccessorSize(getChecked_itemRelationship(getMtDatabase()));
    }

    /**
     * Opens an iterator on the <code>checked_item</code> relationship's successors.
     * @param <E> a MtObject class     * @return an object iterator
     *
     * @see #getChecked_item
     * @see #getChecked_itemSize
     * @see #setChecked_item
     * @see #removeChecked_item
     */
    public final <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> checked_itemIterator() {
        return this.<E>successorIterator(getChecked_itemRelationship(getMtDatabase()), ArtItem.class);
    }

    /**
     * Sets the <code>checked_item</code> relationship's successors.
     * @param succs an array of objects
     *
     * @see #getChecked_item
     * @see #getChecked_itemSize
     * @see #checked_itemIterator
     * @see #removeChecked_item
     */
    public final void setChecked_item(ArtItem[] succs) {
        setSuccessors(getChecked_itemRelationship(getMtDatabase()), succs);
    }

    /**
     * Inserts one object at the beginning of the existing <code>checked_item</code> successors list.
     * @param succ the object to add
     *
     * @see #getChecked_item
     * @see #getChecked_itemSize
     * @see #checked_itemIterator
     * @see #setChecked_item
     * @see #removeChecked_item
     */
    public final void prependChecked_item(ArtItem succ) {
        prependSuccessor(getChecked_itemRelationship(getMtDatabase()), succ);
    }

    /**
     * Adds one object to the end of the existing <code>checked_item</code> successors list.
     * @param succ the object to add
     *
     * @see #getChecked_item
     * @see #setChecked_item
     * @see #removeChecked_item
     * @see #getChecked_itemSize
     * @see #checked_itemIterator
     */
    public final void appendChecked_item(ArtItem succ) {
        appendSuccessor(getChecked_itemRelationship(getMtDatabase()), succ);
    }
    /** Adds multiple objects to the end of the existing <code>checked_item</code> successors list.
     * @param succs an array of objects to add
     *
     * @see #getChecked_item
     * @see #setChecked_item
     * @see #removeChecked_item
     * @see #getChecked_itemSize
     * @see #checked_itemIterator
     */
    public final void appendChecked_item(ArtItem[] succs) {
        addSuccessors(getChecked_itemRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes objects from the <code>checked_item</code> successors list.
     * @param succs an array of objects to remove
     *
     * @see #getChecked_item
     * @see #setChecked_item
     * @see #getChecked_itemSize
     * @see #checked_itemIterator
     */
    public void removeChecked_item(ArtItem[] succs) {
        removeSuccessors(getChecked_itemRelationship(getMtDatabase()), succs);
    }

    /**
     * Removes one object from the <code>checked_item</code> successors list.
     * @param succ the object to remove
     *
     * @see #getChecked_item
     * @see #setChecked_item
     * @see #getChecked_itemSize
     * @see #checked_itemIterator
     */
    public void removeChecked_item(ArtItem succ) {
        removeSuccessor(getChecked_itemRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>checked_item</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearChecked_item() {
        clearSuccessors(getChecked_itemRelationship(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Appraiser(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Appraiser]";
    }
}
